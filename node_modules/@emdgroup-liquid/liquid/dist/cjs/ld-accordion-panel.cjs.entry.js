'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0d41e2c9.js');
const getClassNames = require('./getClassNames-dd3906b3.js');
const closest = require('./closest-b87f59c3.js');

const ldAccordionPanelCss = ":host{--ld-accordion-panel-transition-duration:0.001s;position:relative;display:block;box-sizing:border-box;max-height:var(--ld-accordion-panel-max-height,auto);overflow:hidden;background-color:var(--ld-accordion-bg-col);border-radius:var(--ld-accordion-border-radius);border-top-left-radius:inherit;border-top-right-radius:inherit;will-change:max-height}:host(.ld-accordion-panel--initialized){transition:max-height var(--ld-accordion-panel-transition-duration) ease}@media (prefers-reduced-motion:no-preference){:host(.ld-accordion-panel--initialized){--ld-accordion-panel-transition-duration:0.2s}}:host(.ld-accordion-panel--expanded):before{content:\"\";height:var(--ld-sp-1);background-color:var(--ld-accordion-panel-border-top-color);position:absolute;top:0;left:0;right:0}:host(.ld-accordion-panel--expanded) .ld-accordion-panel__content{opacity:1;visibility:inherit;transition:opacity var(--ld-accordion-panel-transition-duration) linear}.ld-accordion-panel__content{opacity:0;visibility:hidden;transition:opacity var(--ld-accordion-panel-transition-duration) linear,visibility 0s var(--ld-accordion-panel-transition-duration) linear}";

let LdAccordionPanel = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.initialized = false;
    this.transitionEnabled = false;
    this.innerPanelExpanding = false;
    this.onTransitionEnd = (ev) => {
      if (ev.target === this.el) {
        this.innerPanelExpanding = false;
      }
    };
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async applyMaxHeight(additionalHeightFromInnerPanel = 0) {
    if (additionalHeightFromInnerPanel) {
      this.innerPanelExpanding = true;
    }
    // Apply max height on outer panel inside nested accordion.
    if (this.expanded) {
      const closestPanel = closest.closest('ld-accordion-panel', this.el.parentElement);
      closestPanel === null || closestPanel === void 0 ? void 0 : closestPanel.applyMaxHeight(this.el.scrollHeight);
    }
    this.maxHeight = this.expanded
      ? this.el.scrollHeight + additionalHeightFromInnerPanel
      : 0;
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
    this.applyMaxHeight();
  }
  componentDidLoad() {
    setTimeout(() => {
      this.resizeObserver = new ResizeObserver(() => {
        // When a panel is expanding inside a nested accordion, the nested panel
        // takes over the responsibility for updating the max-height on the outer
        // panel. In other words: We disable the observer callback function in
        // order to instantly update the max-height for a better performance.
        if (!this.innerPanelExpanding) {
          this.applyMaxHeight();
        }
      });
      this.resizeObserver.observe(this.contentRef);
      this.initialized = true;
    });
  }
  disconnectedCallback() {
    this.resizeObserver.unobserve(this.contentRef);
  }
  render() {
    const cl = getClassNames.getClassNames([
      'ld-accordion-panel',
      this.expanded && 'ld-accordion-panel--expanded',
      this.initialized && 'ld-accordion-panel--initialized',
    ]);
    return (index.h(index.Host, { style: { '--ld-accordion-panel-max-height': this.maxHeight + 'px' }, class: cl, onTransitionEnd: this.onTransitionEnd }, index.h("div", { ref: (ref) => (this.contentRef = ref), class: "ld-accordion-panel__content" }, index.h("slot", null))));
  }
  get el() { return index.getElement(this); }
};
LdAccordionPanel.style = ldAccordionPanelCss;

exports.ld_accordion_panel = LdAccordionPanel;
