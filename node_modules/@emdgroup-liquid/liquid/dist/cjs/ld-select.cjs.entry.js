'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0d41e2c9.js');
const tether_esm = require('./tether.esm-bdcd1c27.js');
const getClassNames = require('./getClassNames-dd3906b3.js');

const ldSelectCss = ":host{display:inline-flex}:host .ld-select{flex-grow:1;max-width:100%}.ld-select,:host{--ld-select-min-width:12.8125rem;--ld-select-min-height-sm:2rem;--ld-select-min-height-md:2.5rem;--ld-select-min-height-lg:3.125rem;--ld-select-padding-x-sm:0.625rem;--ld-select-padding-x-md:0.75rem;--ld-select-padding-x-lg:0.875rem;--ld-select-padding-y-sm:0.25rem;--ld-select-padding-y-md:0.5rem;--ld-select-padding-y-lg:0.5rem;--ld-select-padding-right-sm:3.125rem;--ld-select-padding-right-md:3.25rem;--ld-select-padding-right-lg:3.375rem;--ld-select-icon-size-sm:1rem;--ld-select-icon-size-md:1.25rem;--ld-select-icon-size-lg:1.5rem;--ld-select-trigger-line-height:1.25;--ld-select-col:var(--ld-col-neutral-900);--ld-select-col-disabled:var(--ld-col-neutral-100);--ld-select-col-border:var(--ld-col-neutral-100);--ld-select-col-border-hover:var(--ld-col-neutral-300);--ld-select-bg-col:var(--ld-col-wht);--ld-select-selection-col:var(--ld-col-wht);--ld-select-invalid-col:var(--ld-thm-error);--ld-select-invalid-icon-col-hover:var(--ld-thm-error-hover);--ld-select-invalid-icon-col-focus:var(--ld-thm-error-focus);--ld-select-invalid-icon-col-active:var(--ld-thm-error-active);--ld-select-invalid-disabled-bg-col:var(--ld-thm-error-disabled);--ld-select-thm-col:var(--ld-thm-primary);--ld-select-thm-col-hover:var(--ld-thm-primary-hover);--ld-select-thm-col-focus:var(--ld-thm-primary-focus);--ld-select-thm-col-active:var(--ld-thm-primary-active);--ld-select-ghost-trigger-bg-col-hover:var(--ld-thm-primary-alpha-lowest);--ld-select-ghost-trigger-bg-col-focus:var(--ld-thm-primary-alpha-low)}.ld-select *,.ld-select :after,.ld-select :before,:host *,:host :after,:host :before{box-sizing:border-box}.ld-select ul,:host ul{list-style:none}.ld-select{display:inline-flex;position:relative}.ld-select ::slotted(ld-icon),.ld-select select+.ld-icon{width:var(--ld-select-icon-size-md);height:var(--ld-select-icon-size-md)}.ld-select ::slotted(ld-icon){display:contents!important}.ld-select select+.ld-icon,.ld-select select+.ld-select__icon{position:absolute;right:var(--ld-select-padding-x-md);top:50%;transform:translateY(-50%)}.ld-select select+.ld-icon{width:var(--ld-select-icon-size-md);height:var(--ld-select-icon-size-md)}.ld-select select:where(:not[multiple]){padding-right:var(--ld-select-padding-right-md)}.ld-select.ld-select--sm select+.ld-icon,.ld-select.ld-select--sm select+.ld-select__icon{right:var(--ld-select-padding-x-sm)}.ld-select.ld-select--sm select+.ld-icon{width:var(--ld-select-icon-size-sm);height:var(--ld-select-icon-size-sm)}.ld-select.ld-select--sm select:where(:not[multiple]){padding-right:var(--ld-select-padding-right-sm)}.ld-select.ld-select--lg select+.ld-icon,.ld-select.ld-select--lg select+.ld-select__icon{right:var(--ld-select-padding-x-lg)}.ld-select.ld-select--lg select+.ld-icon{width:var(--ld-select-icon-size-lg);height:var(--ld-select-icon-size-lg)}.ld-select.ld-select--lg select:where(:not[multiple]){padding-right:var(--ld-select-padding-right-lg)}:where(.ld-select:not(.ld-select--inline):not(.ld-select--ghost)){min-width:var(--ld-select-min-width)}.ld-select__btn-trigger,.ld-select__select{width:100%}.ld-select>select,.ld-select__btn-trigger{position:relative;display:flex;align-items:center;justify-content:flex-end;font:var(--ld-typo-body-m);line-height:var(--ld-select-trigger-line-height);border:0;padding:var(--ld-select-padding-y-md) var(--ld-select-padding-x-md);border-radius:var(--ld-br-m);height:100%;-webkit-user-select:none;user-select:none;touch-action:manipulation;color:var(--ld-select-col);background-color:var(--ld-select-bg-col);text-align:left;-webkit-appearance:none;appearance:none;-webkit-touch-callout:none}.ld-select>select:where(select),.ld-select__btn-trigger:where(select){width:100%}.ld-select>select:where(select)[multiple] optgroup,.ld-select__btn-trigger:where(select)[multiple] optgroup{padding:var(--ld-sp-8) 0;font-style:normal}.ld-select>select:where(select)[multiple] option,.ld-select__btn-trigger:where(select)[multiple] option{padding:var(--ld-sp-6) var(--ld-sp-6);margin:0 calc(var(--ld-sp-6)*-1);border-radius:var(--ld-br-m)}.ld-select>select:where(select)[multiple] option:not(:last-of-type),.ld-select__btn-trigger:where(select)[multiple] option:not(:last-of-type){margin-bottom:var(--ld-sp-2)}.ld-select>select:where(.ld-select__btn-trigger:not([aria-disabled=true])),.ld-select>select:where(select:not(:disabled):not([aria-disabled=true])),.ld-select__btn-trigger:where(.ld-select__btn-trigger:not([aria-disabled=true])),.ld-select__btn-trigger:where(select:not(:disabled):not([aria-disabled=true])){cursor:pointer}.ld-select>select:where([aria-expanded=true]),.ld-select__btn-trigger:where([aria-expanded=true]){z-index:2}.ld-select>select:where([aria-expanded=true]):not(:focus:focus-visible):not(.ld-select__btn-trigger--detached),.ld-select__btn-trigger:where([aria-expanded=true]):not(:focus:focus-visible):not(.ld-select__btn-trigger--detached){box-shadow:none}.ld-select>select:disabled,.ld-select>select:disabled+.ld-icon,.ld-select>select:disabled+.ld-select__icon,.ld-select>select:where([aria-disabled=true]),.ld-select>select:where([aria-disabled=true])+.ld-icon,.ld-select>select:where([aria-disabled=true])+.ld-select__icon,.ld-select__btn-trigger:disabled,.ld-select__btn-trigger:disabled+.ld-icon,.ld-select__btn-trigger:disabled+.ld-select__icon,.ld-select__btn-trigger:where([aria-disabled=true]),.ld-select__btn-trigger:where([aria-disabled=true])+.ld-icon,.ld-select__btn-trigger:where([aria-disabled=true])+.ld-select__icon{color:var(--ld-select-col-disabled)}.ld-select__btn-trigger{overflow:hidden}:where(.ld-select),:where(.ld-select)>select{min-height:var(--ld-select-min-height-md)}:where(.ld-select--sm),:where(.ld-select--sm)>select{min-height:var(--ld-select-min-height-sm)}:where(.ld-select--lg),:where(.ld-select--lg)>select{min-height:var(--ld-select-min-height-lg)}.ld-select--sm .ld-select__btn-trigger,.ld-select--sm>select{padding:var(--ld-select-padding-y-sm) var(--ld-select-padding-x-sm)}.ld-select--lg .ld-select__btn-trigger,.ld-select--lg>select{padding:var(--ld-select-padding-y-lg) var(--ld-select-padding-x-lg)}.ld-select--ghost:not(ld-select),.ld-select--ghost .ld-select__btn-trigger,.ld-select--ghost select{background-color:initial}.ld-select--ghost .ld-select__btn-trigger:not(:focus),.ld-select--ghost select:not(:focus){box-shadow:none}.ld-select:where(:not(.ld-select--ghost)):where(.ld-select--detached) :where(.ld-select__btn-trigger),.ld-select:where(:not(.ld-select--ghost)):where(.ld-select--detached) :where(select),.ld-select:where(:not(.ld-select--ghost)):where(:not(.ld-select--detached):not(.ld-select--expanded)) :where(.ld-select__btn-trigger),.ld-select:where(:not(.ld-select--ghost)):where(:not(.ld-select--detached):not(.ld-select--expanded)) :where(select){box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-col-border)}@media (hover:hover){.ld-select:where(:not(.ld-select--ghost)):where(:not(.ld-select--invalid)) .ld-select__btn-trigger:where(.ld-select__btn-trigger--detached:not(:disabled):not([aria-disabled=true])):hover:not(:focus:focus-visible),.ld-select:where(:not(.ld-select--ghost)):where(:not(.ld-select--invalid)) .ld-select__btn-trigger:where(:not(:disabled):not([aria-disabled=true]):not(.ld-select__btn-trigger--detached):not([aria-expanded=true])):hover:not(:focus:focus-visible),.ld-select:where(:not(.ld-select--ghost)):where(:not(.ld-select--invalid)) select:where(.ld-select__btn-trigger--detached:not(:disabled):not([aria-disabled=true])):hover:not(:focus:focus-visible),.ld-select:where(:not(.ld-select--ghost)):where(:not(.ld-select--invalid)) select:where(:not(:disabled):not([aria-disabled=true]):not(.ld-select__btn-trigger--detached):not([aria-expanded=true])):hover:not(:focus:focus-visible){box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-col-border-hover)}}.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled)):where(:focus:focus-visible),.ld-select--invalid>select:where(:not(:disabled)):where(:focus:focus-visible){box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-invalid-col)}.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:not(:focus:focus-visible)),.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:not(:focus:focus-visible)){background-color:var(--ld-select-invalid-disabled-bg-col);color:var(--ld-select-invalid-col)}.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:not(.ld-select__btn-trigger--ghost)),.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:not(.ld-select__btn-trigger--ghost)){box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-invalid-col)}.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true]))+.ld-icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true]))+.ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])) .ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true]))+.ld-icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true]))+.ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])) .ld-select__icon{color:var(--ld-select-invalid-col)}@media (hover:hover){.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):hover,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):hover{box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-invalid-col)}.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):hover+.ld-icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):hover+.ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):hover .ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):hover ::slotted(ld-icon),.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):hover+.ld-icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):hover+.ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):hover .ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):hover ::slotted(ld-icon){color:var(--ld-select-invalid-icon-col-hover)}}.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible)+.ld-icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible)+.ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible) .ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible) ::slotted(ld-icon),.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible)+.ld-icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible)+.ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible) .ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:focus:focus-visible) ::slotted(ld-icon){color:var(--ld-select-invalid-icon-col-focus)}.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active)+.ld-icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active)+.ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active) .ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active) ::slotted(ld-icon),.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible)+.ld-icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible)+.ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible) .ld-select__icon,.ld-select--invalid .ld-select__btn-trigger--invalid:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible) ::slotted(ld-icon),.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active)+.ld-icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active)+.ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active) .ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active) ::slotted(ld-icon),.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible)+.ld-icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible)+.ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible) .ld-select__icon,.ld-select--invalid>select:where(:not(:disabled):not([aria-disabled=true])):where(:active:focus-visible) ::slotted(ld-icon){color:var(--ld-select-invalid-icon-col-active)}.ld-select__btn-trigger-text-wrapper,.ld-select__selection-list{flex-grow:1}.ld-select__btn-trigger-text-wrapper{font:var(--ld-typo-label-m);line-height:var(--ld-select-trigger-line-height);padding:var(--ld-sp-6) var(--ld-sp-8) var(--ld-sp-6) 0;height:calc(100% + var(--ld-sp-12));margin:calc(var(--ld-sp-6)*-1) 0;display:flex;align-items:center;overflow:hidden}.ld-select--sm .ld-select__btn-trigger-text-wrapper,.ld-select--sm>select{font:var(--ld-typo-body-s);line-height:var(--ld-select-trigger-line-height)}.ld-select--lg .ld-select__btn-trigger-text-wrapper,.ld-select--lg>select{font:var(--ld-typo-body-l);line-height:var(--ld-select-trigger-line-height)}.ld-select>select,.ld-select__btn-trigger-text,.ld-select__selection-label-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ld-select__selection-list{display:flex;flex-wrap:wrap;margin:0 var(--ld-sp-4) calc(var(--ld-sp-4)*-1) 0;overflow:hidden;padding:0}.ld-select__selection-list-item{flex:0 1;margin-right:var(--ld-sp-4);margin-bottom:var(--ld-sp-4);width:100%}.ld-select__selection-list-item--overflowing{display:none}.ld-select__selection-list-more{order:2147483647;height:100%;display:inline-flex;align-items:center;font:var(--ld-typo-label-s);font-weight:700;padding:var(--ld-sp-4) var(--ld-sp-6);border-radius:var(--ld-br-m);margin-right:var(--ld-sp-4);margin-bottom:var(--ld-sp-4)}.ld-select__btn-clear,.ld-select__btn-clear-single{border:0;padding:0;border-radius:var(--ld-br-full);-webkit-user-select:none;user-select:none;touch-action:manipulation;background-color:initial;line-height:0;-webkit-touch-callout:none}.ld-select__btn-clear:not(:disabled),.ld-select__btn-clear-single:not(:disabled){cursor:pointer}.ld-select__btn-clear{margin-right:var(--ld-sp-6);flex-shrink:0}.ld-select__btn-clear:disabled{color:var(--ld-select-col-disabled)}.ld-select__btn-clear-single{z-index:1;margin-left:var(--ld-sp-6)}.ld-select__selection-label{position:relative;width:100%;display:inline-flex;align-items:center;color:var(--ld-select-selection-col);font:var(--ld-typo-label-s);font-weight:700;padding:var(--ld-sp-4) var(--ld-sp-6)}.ld-select__selection-label-bg{position:absolute;top:0;bottom:0;left:0;right:0;border-radius:var(--ld-br-m)}:where(.ld-select__btn-trigger[aria-disabled=true]) .ld-select__selection-label-bg{background-color:var(--ld-select-col-disabled)}.ld-select__selection-label-text{z-index:1}.ld-select__btn-clear-single-icon{--ld-select-btn-clear-single-size:0.75rem;width:var(--ld-select-btn-clear-single-size);height:var(--ld-select-btn-clear-single-size)}.ld-select__btn-clear-icon{--ld-select-btn-clear-size:1.25rem;width:var(--ld-select-btn-clear-size);height:var(--ld-select-btn-clear-size)}.ld-select__icon{fill:none;width:var(--ld-sp-16);height:var(--ld-sp-16)}.ld-select ::slotted(ld-icon),.ld-select__icon,.ld-select select+.ld-icon{flex-shrink:0;display:flex;justify-content:center;align-items:center;pointer-events:none}:where(.ld-select__btn-trigger[aria-disabled=true]) .ld-select ::slotted(ld-icon),:where(select:disabled) .ld-select ::slotted(ld-icon),:where(select[aria-disabled=true]) .ld-select ::slotted(ld-icon),:where(.ld-select__btn-trigger[aria-disabled=true]) .ld-select__icon,:where(select:disabled) .ld-select__icon,:where(select[aria-disabled=true]) .ld-select__icon,:where(.ld-select__btn-trigger[aria-disabled=true]) .ld-select select+.ld-icon,:where(select:disabled) .ld-select select+.ld-icon,:where(select[aria-disabled=true]) .ld-select select+.ld-icon{color:var(--ld-select-col-disabled)}.ld-select ::slotted(ld-icon) .ld-icon,.ld-select ::slotted(ld-icon) svg,.ld-select__icon .ld-icon,.ld-select__icon svg,.ld-select select+.ld-icon .ld-icon,.ld-select select+.ld-icon svg{width:100%;height:100%}.ld-select__icon--rotated{transform-origin:center;transform:rotate(180deg)}.ld-select__slot-container{display:none}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) .ld-select__btn-trigger:where(:focus:focus-visible){box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-thm-col)}@media (hover:hover){:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)).ld-select--ghost :where(.ld-select__btn-trigger):hover:not(:focus),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)).ld-select--ghost :where(select:not(:disabled)):hover:not(:focus){background-color:var(--ld-select-ghost-trigger-bg-col-hover)}}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)).ld-select--ghost :where(.ld-select__btn-trigger):active,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)).ld-select--ghost :where(.ld-select__btn-trigger):active:focus-visible,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)).ld-select--ghost :where(select:not(:disabled)):active,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)).ld-select--ghost :where(select:not(:disabled)):active:focus-visible{background-color:var(--ld-select-ghost-trigger-bg-col-focus)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger)+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger) ::slotted(ld-icon),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled))+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled))+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)) ::slotted(ld-icon){color:var(--ld-select-thm-col)}@media (hover:hover){:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:hover)+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:hover)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:hover) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:hover) ::slotted(ld-icon),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:hover)+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:hover)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:hover) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:hover) ::slotted(ld-icon){color:var(--ld-select-thm-col-hover)}}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:focus:focus-visible),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:focus:focus-visible){box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-thm-col)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:focus:focus-visible)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:focus:focus-visible) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:focus:focus-visible) ::slotted(ld-icon),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:focus:focus-visible)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:focus:focus-visible) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:focus:focus-visible) ::slotted(ld-icon){color:var(--ld-select-thm-col-focus)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active)+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active) ::slotted(ld-icon),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active:focus-visible)+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active:focus-visible)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active:focus-visible) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(.ld-select__btn-trigger):where(:active:focus-visible) ::slotted(ld-icon),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active)+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active) ::slotted(ld-icon),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active:focus-visible)+.ld-icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active:focus-visible)+.ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active:focus-visible) .ld-select__icon,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not(.ld-select--invalid)) :where(select:not(:disabled)):where(:active:focus-visible) ::slotted(ld-icon){color:var(--ld-select-thm-col-active)}:where(.ld-select:not(.ld-select--disabled)):not(.ld-select--invalid) :where(.ld-select__btn-trigger):where(:focus:focus-visible),:where(.ld-select:not(.ld-select--disabled)):not(.ld-select--invalid) :where(select:not(:disabled)):where(:focus:focus-visible){box-shadow:inset 0 0 0 var(--ld-sp-2) var(--ld-select-thm-col)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__selection-list-more{color:var(--ld-select-thm-col)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__selection-label-bg{background-color:var(--ld-select-thm-col)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear-single:where(:focus:focus-visible)+.ld-select__selection-label-bg{background-color:var(--ld-select-thm-col-focus)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear-single:where(:active)+.ld-select__selection-label-bg,:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear-single:where(:active:focus-visible)+.ld-select__selection-label-bg{background-color:var(--ld-select-thm-col-active)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear{color:var(--ld-select-thm-col)}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear:where(:focus:focus-visible){color:var(--ld-select-thm-col-focus)}@media (hover:hover){:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear:where(:hover){color:var(--ld-select-thm-col-hover)}}:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear:where(:active),:where(.ld-select:not(.ld-select--disabled):not([aria-disabled]):not([aria-disabled=true])) .ld-select__btn-clear:where(:active:focus-visible){color:var(--ld-select-thm-col-active)}";

let LdSelect = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ldchange = index.createEvent(this, "ldchange", 7);
    this.ldinput = index.createEvent(this, "ldinput", 7);
    /** Hint for form autofill feature. */
    // @Prop() autocomplete?: string // TODO
    /**
     * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
     * Only one form element in a document can have the autofocus attribute.
     */
    this.autofocus = false;
    /** Tab index of the trigger button. */
    this.ldTabindex = 0;
    /** Currently selected option(s) (read only!) */
    this.selected = [];
    /** Stringified tether options object to be merged with the default options. */
    this.tetherOptions = '{}';
    this.ariaDisabled = false;
    this.expanded = false;
    this.hasCustomIcon = false;
    this.hasMore = false;
    this.initialized = false;
    this.renderHiddenInput = false;
    this.updateSelectedHiddenInputs = (selected) => {
      const selectedValues = selected.map(({ value }) => value);
      const inputs = this.el.querySelectorAll('input');
      // For each existing input, remove it from DOM if not in selected.
      // Remove each value from selectedValues if hidden input already exists.
      inputs.forEach((hiddenInput) => {
        const index = selectedValues.indexOf(hiddenInput.value);
        if (index >= 0) {
          selectedValues.splice(index, 1);
        }
        else {
          hiddenInput.remove();
        }
      });
      // If nothing is selected we need only one hidden input without value.
      if (selected.length === 0) {
        this.appendHiddenInput();
        return;
      }
      // Else add hidden inputs for each value in selectedValues.
      selectedValues.forEach(this.appendHiddenInput);
    };
    this.appendHiddenInput = (value) => {
      const hiddenInput = document.createElement('input');
      // Slot required to keep the hidden input outside the popper.
      hiddenInput.setAttribute('slot', 'hidden');
      hiddenInput.name = this.name;
      hiddenInput.type = 'hidden';
      if (value !== undefined) {
        hiddenInput.value = value;
      }
      this.el.appendChild(hiddenInput);
    };
    this.handleFocusEvent = (ev) => {
      var _a;
      // Emit event only, if focus is not within the select component.
      if (((_a = ev.relatedTarget) === null || _a === void 0 ? void 0 : _a.tagName) === 'LD-OPTION-INTERNAL' ||
        ev.relatedTarget === this.el) {
        ev.stopImmediatePropagation();
      }
    };
  }
  /** Sets focus on the trigger button. */
  async focusInner() {
    if (!this.disabled) {
      this.triggerRef.focus();
    }
  }
  emitEventsAndUpdateHidden(newSelection, oldSelection) {
    if (!this.initialized)
      return;
    const newValues = newSelection.map((option) => option.value);
    const oldValues = oldSelection.map((option) => option.value);
    if (newValues.join() === oldValues.join())
      return;
    this.updateTriggerMoreIndicator(true);
    if (this.renderHiddenInput) {
      this.updateSelectedHiddenInputs(newSelection);
    }
    this.el.dispatchEvent(new InputEvent('change', { bubbles: true }));
    this.el.dispatchEvent(new InputEvent('input', { bubbles: true, composed: true }));
    this.ldchange.emit(newValues);
    this.ldinput.emit(newValues);
  }
  handleTypeAhead(newQuery) {
    if (!newQuery)
      return;
    const options = Array.from(this.listboxRef.querySelectorAll('ld-option-internal'));
    const values = options.map((option) => option.value);
    let index = values.findIndex((value) => value.toLowerCase().indexOf(newQuery.toLowerCase()) === 0);
    if (index > -1) {
      options[index].focusOption();
      return;
    }
    index = 0;
    for (let i = 0; i < values.length; i++) {
      if (newQuery.toLowerCase() < values[i].toLowerCase()) {
        index = i + 1;
        break;
      }
    }
    if (index > 0) {
      options[index - 1].focusOption();
    }
  }
  isOverflowing() {
    return (this.selectionListRef.scrollHeight > this.selectionListRef.clientHeight);
  }
  updateTriggerMoreIndicator(refresh = false) {
    if (!this.multiple)
      return;
    if (!this.maxRows) {
      return;
    }
    if (refresh)
      this.hasMore = false;
    window.requestAnimationFrame(() => {
      var _a;
      if (!this.selectionListRef)
        return;
      const selectionListItems = Array.from(this.selectionListRef.querySelectorAll('.ld-select__selection-list-item'));
      if (!this.hasMore) {
        // reset
        (_a = this.selectionListRef
          .querySelector('.ld-select__selection-list-more')) === null || _a === void 0 ? void 0 : _a.remove();
        selectionListItems.forEach((el) => {
          el.classList.remove('ld-select__selection-list-item--overflowing');
        });
      }
      // If overflowing, hide overflowing and show "+X" indicator
      if (this.isOverflowing()) {
        let moreItem;
        if (!this.hasMore) {
          moreItem = document.createElement('li');
          moreItem.classList.add('ld-select__selection-list-more');
          this.selectionListRef.prepend(moreItem);
        }
        else {
          moreItem = this.selectionListRef.querySelector('.ld-select__selection-list-more');
        }
        this.hasMore = true;
        const maxOffset = this.maxRows * 1.75 * 16;
        let overflowingTotal = 0;
        selectionListItems.forEach((el) => {
          const overflowing = overflowingTotal
            ? true
            : el.offsetTop >= maxOffset;
          el.classList[overflowing ? 'add' : 'remove']('ld-select__selection-list-item--overflowing');
          if (overflowing)
            overflowingTotal++;
        });
        const hideLastVisibleIfMoreIndicatorOverflowing = () => {
          moreItem = this.selectionListRef.querySelector('.ld-select__selection-list-more');
          moreItem.innerText = `+${overflowingTotal}`;
          if (moreItem.offsetTop < maxOffset) {
            return;
          }
          const notOverflowing = Array.from(this.selectionListRef.querySelectorAll('.ld-select__selection-list-item:not(.ld-select__selection-list-item--overflowing)'));
          const [lastNotOverflowing] = notOverflowing.slice(-1);
          if (lastNotOverflowing) {
            lastNotOverflowing.classList.add('ld-select__selection-list-item--overflowing');
            overflowingTotal++;
            moreItem.innerText = `+${overflowingTotal}`;
            window.requestAnimationFrame(() => {
              hideLastVisibleIfMoreIndicatorOverflowing();
            });
          }
        };
        hideLastVisibleIfMoreIndicatorOverflowing();
      }
    });
  }
  updatePopperWidth() {
    this.listboxRef.style.setProperty('width', `${this.selectRef.getBoundingClientRect().width}px`);
  }
  updatePopperShadowHeight() {
    const ldPopper = this.listboxRef;
    ldPopper.updateShadowHeight(`calc(100% + ${this.triggerRef.getBoundingClientRect().height}px)`);
  }
  updatePopperTheme() {
    const themeEl = this.el.closest('[class*="ld-theme-"]');
    if (!themeEl)
      return;
    setTimeout(() => {
      var _a;
      // Array.from(themeEl.classList).find doesn't work in JSDom for some reason.
      this.theme = (_a = themeEl.classList
        .toString()
        .split(' ')
        .find((cl) => cl.startsWith('ld-theme-'))) === null || _a === void 0 ? void 0 : _a.substr(9);
    });
  }
  updatePopper() {
    this.popper.position();
    this.updatePopperWidth();
    this.updatePopperShadowHeight();
    this.updatePopperTheme();
  }
  initPopper() {
    let customTetherOptions = {};
    customTetherOptions = JSON.parse(this.tetherOptions);
    this.popper = new tether_esm.Tether(Object.assign({ classPrefix: 'ld-tether', element: this.listboxRef, target: this.selectRef, attachment: 'top left', targetAttachment: 'bottom left', offset: this.mode ? '-4px 0' : '0 0', constraints: [
        {
          to: 'window',
          pin: true,
        },
      ] }, customTetherOptions));
    this.listboxRef.classList.add('ld-select__popper--initialized');
  }
  initOptions() {
    const initialized = this.initialized;
    const children = initialized
      ? this.internalOptionsContainerRef.querySelectorAll('ld-option-internal')
      : this.el.querySelectorAll('ld-option');
    if (!children.length) {
      throw new TypeError('ld-select requires at least one ld-option element as a child, but found none.');
    }
    const selectedChildren = Array.from(children).filter((child) => {
      return child.selected;
    });
    if (selectedChildren.length > 1 && !this.multiple) {
      throw new TypeError('Multiple selected options are not allowed, if multiple option is not set.');
    }
    if (!initialized) {
      let internalOptionsHTML = '';
      children.forEach((ldOption) => {
        const classStr = ldOption.classList.toString();
        internalOptionsHTML += `<ld-option-internal${classStr ? ' class="' + classStr + '"' : ''}${this.multiple ? ' mode="checkbox"' : ''}${this.size ? ' size="' + this.size + '"' : ''}${this.preventDeselection ? ' prevent-deselection' : ''}${ldOption.selected ? ' selected' : ''}${ldOption.value ? ' value="' + ldOption.value + '"' : ''}${ldOption.disabled ? ' disabled' : ''}>${ldOption.innerHTML.replaceAll(/<ld-icon (.|\n|\r)*slot="icon"(.|\n|\r)*>(.|\n|\r)*<\/ld-icon>/g, '')}</ld-option-internal>`;
      });
      this.internalOptionsHTML = internalOptionsHTML;
    }
    this.selected = selectedChildren.map((child) => ({
      value: child.value,
      text: child.innerText,
    }));
    this.updateTriggerMoreIndicator(true);
  }
  updateHiddenInputs() {
    const hiddenInputs = this.el.querySelectorAll('input');
    const outerForm = this.el.closest('form');
    if (!this.name || !(outerForm || this.form)) {
      hiddenInputs.forEach((hiddenInput) => {
        hiddenInput.remove();
      });
      return;
    }
    if (!hiddenInputs.length) {
      this.updateSelectedHiddenInputs(this.selected);
      return;
    }
    hiddenInputs.forEach((hiddenInput) => {
      hiddenInput.name = this.name;
      if (this.form) {
        hiddenInput.setAttribute('form', this.form);
      }
      else if (hiddenInput.getAttribute('form')) {
        hiddenInput.removeAttribute('form');
      }
    });
  }
  handleSlotChange(mutationsList) {
    if (mutationsList.some((record) => record.target.tagName !== 'LD-OPTION')) {
      return;
    }
    this.initialized = false;
    const oldValues = [...this.selected];
    this.initOptions();
    this.initialized = true;
    const newValues = [...this.selected];
    this.emitEventsAndUpdateHidden(newValues, oldValues);
  }
  initObserver() {
    this.observer = new MutationObserver(this.handleSlotChange.bind(this));
    this.observer.observe(this.el, {
      subtree: true,
      childList: true,
      attributes: true,
    });
  }
  togglePopper() {
    this.expanded = !this.expanded;
    if (this.expanded) {
      this.popper.enable();
    }
    else {
      this.popper.disable();
      this.triggerRef.focus();
    }
  }
  clearSelection() {
    Array.from(this.listboxRef.querySelectorAll('ld-option-internal')).forEach((option) => {
      option.selected = false;
    });
    this.selected = [];
  }
  handleWindowResize() {
    if (this.disabled || this.ariaDisabled)
      return; // this is for a minor performance optimization only
    this.updatePopperWidth();
    this.updateTriggerMoreIndicator(true);
    this.updatePopperShadowHeight();
  }
  handleSelect(ev) {
    const target = ev.target;
    // Ignore events which are not fired on current instance.
    if (target.closest('[role="listbox"]') !== this.listboxRef)
      return;
    if (!this.multiple) {
      // Deselect currently selected option, if it's not the target option.
      this.listboxRef
        .querySelectorAll('ld-option-internal')
        .forEach((option) => {
        if (option !== target.closest('ld-option-internal')) {
          option.selected = false;
        }
      });
      this.togglePopper();
    }
    this.initOptions();
  }
  expandAndFocus() {
    this.expand();
    setTimeout(() => {
      var _a;
      // If selected in single select mode, focus selected.
      let optionToFocus;
      if (!this.multiple) {
        // Using find instead of ld-option-internal[selected] selector below
        // in order to prevent "TypeError: e.getAttributeNode is not a function" in JSDom.
        optionToFocus = (_a = Array.from(this.listboxRef.querySelectorAll('ld-option-internal'))
          .find((ldOption) => ldOption.hasAttribute('selected'))) === null || _a === void 0 ? void 0 : _a.shadowRoot.querySelector('[role="option"]');
      }
      if (!optionToFocus) {
        optionToFocus = this.triggerRef;
      }
      optionToFocus.focus();
    });
  }
  handleHome(ev) {
    // Move focus to the trigger button.
    ev.preventDefault();
    if (this.el.shadowRoot.activeElement !== this.triggerRef) {
      this.triggerRef.focus();
    }
  }
  handleEnd(ev) {
    // Move focus to the last option.
    ev.preventDefault();
    const options = Array.from(this.listboxRef.querySelectorAll('ld-option-internal'));
    if (document.activeElement !== options[options.length - 1]) {
      options[options.length - 1].focusOption();
    }
  }
  selectAndFocus(ev, ldOption) {
    var _a;
    if (!ldOption)
      return;
    if (this.multiple && ev.shiftKey) {
      if (((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.tagName) === 'LD-OPTION-INTERNAL' &&
        !document.activeElement.hasAttribute('selected')) {
        document.activeElement.dispatchEvent(new KeyboardEvent('keydown', { key: ' ' }));
      }
      ldOption.focusOption();
      if (!ldOption.hasAttribute('selected')) {
        ldOption.dispatchEvent(new KeyboardEvent('keydown', { key: ' ' }));
      }
    }
    else {
      ldOption.focusOption();
    }
  }
  typeAhead(key) {
    // Type a character: focus moves to the next item with a name that starts with the typed character.
    // Type multiple characters in rapid succession: focus moves to the next item with a name that starts
    // with the string of characters typed.
    window.clearTimeout(this.typeAheadTimeout);
    this.typeAheadQuery = (this.typeAheadQuery || '') + key;
    this.typeAheadTimeout = window.setTimeout(() => {
      this.typeAheadQuery = '';
    }, 500);
  }
  handleKeyDown(ev) {
    var _a, _b;
    if (this.disabled || this.ariaDisabled)
      return;
    // Ignore events if current instance has no focus.
    if (document.activeElement.closest('[role="listbox"]') !== this.listboxRef &&
      document.activeElement.closest('ld-select') !== this.el) {
      return;
    }
    // If the clear button is focused, ignore Enter and Space key events.
    if (this.el.shadowRoot.activeElement === this.btnClearRef &&
      (ev.key === ' ' || ev.key === 'Enter')) {
      return;
    }
    // If an option is focused, ignore Enter and Space key events
    // (the internal option component will dispatch its own event on selection).
    if (document.activeElement.closest('[role="listbox"]') !== this.listboxRef &&
      this.el.shadowRoot.activeElement.classList.contains('ld-select__btn-clear-single') &&
      (ev.key === ' ' || ev.key === 'Enter')) {
      return;
    }
    switch (ev.key) {
      case 'ArrowDown': {
        // If not expanded, expand popper.
        // If expanded, move focus to the next option.
        // If shift is pressed, select the next option.
        // Holding down the Shift key and then using the Down cursor keys
        // increases the range of items selected (multiple mode only).
        ev.preventDefault();
        if (!this.expanded) {
          this.expandAndFocus();
          return;
        }
        if (ev.metaKey) {
          this.handleEnd(ev);
          return;
        }
        let nextLdOption;
        if (((_a = document.activeElement.nextElementSibling) === null || _a === void 0 ? void 0 : _a.tagName) ===
          'LD-OPTION-INTERNAL') {
          nextLdOption = document.activeElement.nextElementSibling;
        }
        else {
          if (document.activeElement === this.el) {
            nextLdOption = this.listboxRef.querySelector('ld-option-internal');
          }
        }
        this.selectAndFocus(ev, nextLdOption);
        break;
      }
      case 'ArrowUp': {
        // If not expanded, expand popper.
        // If expanded, move focus to the previous option.
        // If the first option is focused, focus the trigger button.
        // Holding down the Shift key and then using the Up cursor keys
        // increases the range of items selected (multiple mode only).
        ev.preventDefault();
        if (!this.expanded) {
          this.expandAndFocus();
          return;
        }
        if (ev.metaKey) {
          this.handleHome(ev);
          return;
        }
        if (((_b = document.activeElement.previousElementSibling) === null || _b === void 0 ? void 0 : _b.tagName) ===
          'LD-OPTION-INTERNAL') {
          this.selectAndFocus(ev, document.activeElement
            .previousElementSibling);
          return;
        }
        if (document.activeElement ===
          this.listboxRef.querySelector('ld-option-internal')) {
          this.triggerRef.focus();
        }
        break;
      }
      case 'Home':
        if (this.expanded) {
          this.handleHome(ev);
        }
        break;
      case 'End':
        if (this.expanded) {
          this.handleEnd(ev);
        }
        break;
      case ' ':
        // If not expanded: Toggle popper.
        ev.preventDefault();
        ev.stopImmediatePropagation();
        if (this.expanded &&
          this.el.shadowRoot.activeElement === this.triggerRef) {
          this.togglePopper();
        }
        else {
          this.expandAndFocus();
        }
        break;
      case 'Enter':
        // If expanded and trigger button is focused: Toggle popper.
        ev.preventDefault();
        if (this.expanded &&
          this.el.shadowRoot.activeElement === this.triggerRef) {
          this.togglePopper();
        }
        break;
      case 'Escape':
        // If expanded: Close popper.
        if (this.expanded) {
          ev.preventDefault();
          ev.stopImmediatePropagation();
          this.togglePopper();
        }
        break;
      case 'Tab': // Also covers Shift+Tab
        // If expanded: Prevent default.
        if (this.expanded) {
          ev.preventDefault();
          ev.stopImmediatePropagation();
        }
        break;
      case 'Shift':
      case 'Meta':
        break;
      default:
        if (this.expanded) {
          ev.preventDefault();
          ev.stopImmediatePropagation();
          this.typeAhead(ev.key);
        }
    }
  }
  handleClickOutside(ev) {
    if (ev.target.closest('ld-select') !== this.el &&
      ev.target.closest('[role="listbox"]') !== this.listboxRef) {
      this.expanded = false;
    }
  }
  // Mobile Safari in some cases does not react to click events on elements
  // which are not interactive. But it does to touch events.
  handleTouchOutside(ev) {
    this.handleClickOutside(ev);
  }
  expand() {
    if (!this.popper)
      this.initPopper();
    this.togglePopper();
  }
  handleTriggerClick(ev) {
    ev.preventDefault();
    if (this.disabled || this.ariaDisabled)
      return;
    this.expand();
  }
  handleClearClick(ev) {
    ev.preventDefault();
    ev.stopImmediatePropagation();
    if (this.disabled || this.ariaDisabled)
      return;
    this.clearSelection();
    this.triggerRef.focus();
  }
  handleClearSingleClick(ev, optionValue) {
    ev.preventDefault();
    ev.stopImmediatePropagation();
    if (this.disabled || this.ariaDisabled)
      return;
    this.selected = this.selected.filter((selection) => selection.value !== optionValue);
    this.listboxRef
      .querySelector(`ld-option-internal[value='${optionValue}']`)
      .dispatchEvent(new KeyboardEvent('keydown', { key: ' ' }));
  }
  componentWillLoad() {
    const outerForm = this.el.closest('form');
    if (this.name && (outerForm || this.form)) {
      this.renderHiddenInput = true;
    }
    const customIcon = this.el.querySelector('ld-icon');
    this.hasCustomIcon = !!customIcon;
    if (customIcon) {
      customIcon.setAttribute('size', this.size);
    }
    if (this.el.getAttribute('aria-disabled') === 'true') {
      this.ariaDisabled = true;
    }
    this.initOptions();
    if (this.renderHiddenInput) {
      this.updateSelectedHiddenInputs(this.selected);
    }
  }
  componentDidLoad() {
    setTimeout(() => {
      this.initObserver();
      this.initialized = true;
    });
    if (this.autofocus) {
      this.focusInner();
    }
  }
  componentDidUpdate() {
    if (this.expanded) {
      this.updatePopper();
    }
  }
  disconnectedCallback() {
    window.clearTimeout(this.typeAheadTimeout);
    if (this.popper)
      this.popper.destroy();
    if (this.observer)
      this.observer.disconnect();
  }
  render() {
    var _a, _b;
    // Endable detached mode if any display mode is set.
    const detached = !!this.mode;
    // Implicitly enable inline mode if ghost mode is enabled.
    const inline = this.mode === 'inline' || this.mode === 'ghost';
    // Disallow ghost in combination with multiple select mode.
    const ghost = !this.multiple && this.mode === 'ghost';
    const cl = [
      'ld-select',
      this.disabled && 'ld-select--disabled',
      this.size && `ld-select--${this.size}`,
      this.invalid && 'ld-select--invalid',
      this.expanded && 'ld-select--expanded',
      detached && 'ld-select--detached',
      inline && 'ld-select--inline',
      ghost && 'ld-select--ghost',
    ];
    const triggerCl = [
      'ld-select__btn-trigger',
      this.invalid && 'ld-select__btn-trigger--invalid',
      detached && 'ld-select__btn-trigger--detached',
      inline && 'ld-select__btn-trigger--inline',
      ghost && 'ld-select__btn-trigger--ghost',
    ];
    const triggerIconCl = [
      'ld-select__icon',
      this.expanded && 'ld-select__icon--rotated',
    ];
    const triggerText = this.multiple
      ? this.placeholder
      : ((_a = this.selected[0]) === null || _a === void 0 ? void 0 : _a.text) || this.placeholder;
    return (index.h(index.Host, null, index.h("div", { class: getClassNames.getClassNames(cl), "aria-disabled": this.disabled || this.ariaDisabled, part: "root", onBlur: this.handleFocusEvent, onFocusout: this.handleFocusEvent, style: this.expanded
        ? {
          zIndex: '2147483647', // Highest possible z-index
        }
        : undefined }, this.renderHiddenInput && index.h("slot", { name: "hidden" }), index.h("div", { class: "ld-select__slot-container", part: "slot-container" }, index.h("slot", null)), index.h("div", { class: "ld-select__select", part: "select", ref: (el) => (this.selectRef = el) }, index.h("div", { class: getClassNames.getClassNames(triggerCl), role: "button", part: "btn-trigger focusable", tabindex: this.disabled && !this.ariaDisabled
        ? undefined
        : this.ldTabindex, "aria-disabled": this.disabled || this.ariaDisabled ? 'true' : 'false', "aria-haspopup": "listbox", "aria-expanded": this.expanded ? 'true' : 'false', "aria-label": triggerText, onClick: this.handleTriggerClick.bind(this), ref: (el) => (this.triggerRef = el) }, this.multiple && this.selected.length ? (index.h("ul", { class: "ld-select__selection-list", part: "selection-list", "aria-label": "Selected options", ref: (el) => (this.selectionListRef = el), style: {
        maxHeight: this.maxRows && this.maxRows > 0
          ? `${this.maxRows * 1.75}rem`
          : undefined,
      } }, this.selected.map((selection, index$1) => {
      return (index.h("li", { key: index$1, class: "ld-select__selection-list-item", style: { order: index$1 + 1 + '' }, part: "selection-list-item" }, index.h("label", { class: "ld-select__selection-label" }, index.h("span", { class: "ld-select__selection-label-text", title: selection.text, part: "selection-label-text" }, selection.text), index.h("button", { disabled: this.disabled || this.ariaDisabled
          ? true
          : undefined, class: "ld-select__btn-clear-single", part: "btn-clear-single focusable", onClick: (ev) => {
          this.handleClearSingleClick.call(this, ev, selection.value);
        } }, index.h("svg", { class: "ld-select__btn-clear-single-icon", part: "icon-clear-single", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 12 12" }, index.h("title", null, "Clear"), index.h("path", { stroke: "#fff", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", d: "M2 2l8 8M2 10l8-8" }))), index.h("span", { class: "ld-select__selection-label-bg", part: "selection-label-bg" }))));
    }))) : (index.h("span", { class: "ld-select__btn-trigger-text-wrapper", title: triggerText, part: "trigger-text-wrapper" }, index.h("span", { class: "ld-select__btn-trigger-text", part: "trigger-text" }, triggerText))), ((_b = this.selected) === null || _b === void 0 ? void 0 : _b.length) && this.multiple ? (index.h("button", { class: "ld-select__btn-clear", disabled: this.disabled || this.ariaDisabled ? true : undefined, onClick: this.handleClearClick.bind(this), ref: (el) => (this.btnClearRef = el), part: "btn-clear focusable" }, index.h("svg", { class: "ld-select__btn-clear-icon", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 21 20", part: "icon-clear" }, index.h("title", null, "Clear all"), index.h("path", { fill: "currentColor", "fill-rule": "evenodd", d: "M10 20a10 10 0 100-20 10 10 0 000 20z", "clip-rule": "evenodd" }), index.h("path", { stroke: "#fff", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "2", d: "M6.67 6.67l6.67 6.66M6.67 13.33l6.67-6.66" })))) : (''), index.h("slot", { name: "icon" }), !this.hasCustomIcon && (index.h("svg", { class: getClassNames.getClassNames(triggerIconCl), role: 'presentation', xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", part: "trigger-icon" }, index.h("path", { stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round", "stroke-width": "3", d: "M3 6l5 4 5-4" }))))), index.h("ld-select-popper", { onBlur: this.handleFocusEvent, onFocusout: this.handleFocusEvent, popperClass: this.popperClass, ref: (el) => (this.listboxRef = el), role: "listbox", expanded: this.expanded, size: this.size, detached: detached, theme: this.theme }, index.h("div", { ref: (el) => (this.internalOptionsContainerRef = el), innerHTML: this.internalOptionsHTML, part: "options-container" })))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "selected": ["emitEventsAndUpdateHidden"],
    "typeAheadQuery": ["handleTypeAhead"],
    "name": ["updateHiddenInputs"],
    "form": ["updateHiddenInputs"]
  }; }
};
LdSelect.style = ldSelectCss;

exports.ld_select = LdSelect;
