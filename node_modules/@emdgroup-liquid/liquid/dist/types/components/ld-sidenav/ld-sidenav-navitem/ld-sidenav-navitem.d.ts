import '../../../components';
import { EventEmitter } from '../../../stencil-public-runtime';
/**
 * @slot - default slot for the nav item label.
 * @slot icon - slot for svg or icon component.
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export declare class LdSidenavNavitem implements InnerFocusable {
  el: HTMLElement;
  private sidenav;
  private focusableElement;
  private tooltipRef;
  private slotContainerRef;
  /** Sets visual indicator to denote that the nav item is currently active. */
  active: boolean;
  /**
   * Transforms the nav item to an anchor element.
   */
  href?: string;
  /**
   * Display mode.
   * In secondary mode the navitem is less high, displays a filled dot
   * instead of the icon and is hidden when the sidenav collapses.
   * The tertiary mode is similar to secondary mode, with the navitem
   * indented and the dot being empty and having a border.
   */
  mode?: 'secondary' | 'tertiary';
  /** Applies full border-radius. */
  rounded: boolean;
  /** Tab index of the button. */
  ldTabindex: number | undefined;
  /**
   * The `target` attributed can be used in conjunction with the `href` attribute.
   * See [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
   * for more information on the `target` attribute.
   */
  target?: '_blank' | '_self' | '_parent' | '_top';
  /** Accepts an id of an ld-subnav component to navigate to it on click. */
  to?: string;
  /** Emitted on click if prop to is set. */
  ldSidenavNavitemTo: EventEmitter<{
    id: string;
    label: string;
  }>;
  tooltipContent: string;
  abbreviation: string;
  sidenavAlignement: 'left' | 'right';
  sidenavClosable: boolean;
  sidenavCollapsed: boolean;
  sidenavExpandsOnMouseEnter: boolean;
  /**
   * Sets focus on the anchor or button
   */
  focusInner(): Promise<void>;
  handleSidenavCollapsedChange(ev: CustomEvent<boolean>): void;
  handleSidenavBreakpointChange(ev: CustomEvent<boolean>): void;
  private getabbreviation;
  private onClick;
  componentWillLoad(): void;
  componentDidLoad(): void;
  render(): any;
}
