import '../../../components'; // type definitions for type checks and intelliSense
import { Component, Element, h, Host, Listen, State } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
import { closest } from '../../../utils/closest';
import { toggleStackToTop } from '../utils/toggleStackToTop';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdSidenavSeparator {
  constructor() {
    this.computeScaleXCollapsed = () => {
      const sidenavWidth = parseFloat(window
        .getComputedStyle(this.sidenav)
        .getPropertyValue('--ld-sidenav-width'));
      const sidenavPaddingX = parseFloat(window
        .getComputedStyle(this.sidenav)
        .getPropertyValue('--ld-sidenav-padding-x'));
      const sidenavNavitemIconSize = parseFloat(window
        .getComputedStyle(this.sidenav)
        .getPropertyValue('--ld-sidenav-navitem-icon-size'));
      return sidenavNavitemIconSize / (sidenavWidth - 2 * sidenavPaddingX);
    };
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    if (this.el.parentElement &&
      !['LD-SIDENAV-SLIDER', 'LD-SIDENAV-SUBNAV'].includes(this.el.parentElement.tagName)) {
      return;
    }
    this.sidenavCollapsed = ev.detail;
    if (this.sidenav.narrow) {
      toggleStackToTop(this.el, this.sidenavCollapsed);
    }
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    this.scaleXCollapsed = this.computeScaleXCollapsed() || 1;
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-separator',
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-separator--collapsed',
    ]);
    return (h(Host, { style: {
        '--ld-sidenav-separator-scale-x-collapsed': this.scaleXCollapsed.toString(),
      }, class: cl },
      h("hr", { class: "ld-sidenav-separator-line", part: "hr" })));
  }
  static get is() { return "ld-sidenav-separator"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sidenav-separator.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sidenav-separator.css"]
  }; }
  static get states() { return {
    "sidenavCollapsed": {},
    "sidenavClosable": {},
    "scaleXCollapsed": {}
  }; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "ldSidenavCollapsedChange",
      "method": "handleSidenavCollapsedChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavBreakpointChange",
      "method": "handleSidenavBreakpointChange",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}
