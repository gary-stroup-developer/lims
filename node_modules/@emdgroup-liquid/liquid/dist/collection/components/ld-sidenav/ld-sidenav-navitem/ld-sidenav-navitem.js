import '../../../components'; // type definitions for type checks and intelliSense
import { Component, Element, Event, h, Listen, Method, Prop, State, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
import { closest } from '../../../utils/closest';
import { toggleStackToTop } from '../utils/toggleStackToTop';
/**
 * @slot - default slot for the nav item label.
 * @slot icon - slot for svg or icon component.
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdSidenavNavitem {
  constructor() {
    /** Sets visual indicator to denote that the nav item is currently active. */
    this.active = false;
    /** Applies full border-radius. */
    this.rounded = false;
    this.getabbreviation = () => {
      try {
        const words = this.el.textContent.trim().split(' ');
        const chars = words.length > 1
          ? words.map((s) => s.match(/[a-zA-Z]/)[0])
          : words[0].match(/[a-zA-Z]/g);
        return (chars
          // The M character is twice as wide as other characters in the M-Font.
          .slice(0, chars.some((char) => char.toLowerCase() === 'm') ? 1 : 2)
          .join('')
          .toUpperCase());
      }
      catch (err) {
        return '';
      }
    };
    this.onClick = () => {
      var _a;
      if (this.to) {
        this.ldSidenavNavitemTo.emit({ id: this.to, label: this.el.textContent });
      }
      ;
      (_a = this.tooltipRef) === null || _a === void 0 ? void 0 : _a.hideTooltip();
    };
  }
  /**
   * Sets focus on the anchor or button
   */
  async focusInner() {
    var _a;
    (_a = this.focusableElement) === null || _a === void 0 ? void 0 : _a.focus();
  }
  handleSidenavCollapsedChange(ev) {
    var _a;
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail;
    if (this.sidenav.narrow) {
      toggleStackToTop(this.el, this.sidenavCollapsed);
    }
    ;
    (_a = this.tooltipRef) === null || _a === void 0 ? void 0 : _a.hideTooltip();
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    this.sidenavAlignement = this.sidenav.align;
    this.sidenavExpandsOnMouseEnter =
      this.sidenav.expandTrigger === 'mouseenter';
    if (!['secondary', 'tertiary'].includes(this.mode) &&
      !this.el.querySelector('[slot="icon"]')) {
      this.tooltipContent = this.el.textContent.trim();
      this.abbreviation = this.getabbreviation();
    }
  }
  componentDidLoad() {
    // HACK: Due to Safari's buggy line-clamp implementation we need
    //  to trigger a re-render after a certain timeout in order for the
    //  ellipsis to be rendered. In most cases the first timeout is enough
    //  to trigger a re-render in Safari. However, in rare cases we need
    //  to wait a little longer.
    //  A re-render can be triggered by changing certain styles; in our
    //  case we use box-sizing and align-items which otherwhise do not
    //  effect the appearence of the element.
    setTimeout(() => {
      this.slotContainerRef.style.boxSizing = 'border-box';
    });
    setTimeout(() => {
      this.slotContainerRef.style.alignItems = 'center';
    }, 200);
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-navitem',
      this.active && 'ld-sidenav-navitem--active',
      this.rounded && 'ld-sidenav-navitem--rounded',
      this.mode && `ld-sidenav-navitem--${this.mode}`,
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-navitem--collapsed',
    ]);
    const Tag = this.href ? 'a' : 'button';
    return (h(Tag, { part: "navitem focusable", class: cl, href: this.href, ref: (el) => (this.focusableElement = el), rel: this.target === '_blank' ? 'noreferrer noopener' : undefined, onClick: this.onClick, "aria-haspopup": this.to ? 'true' : undefined, "aria-expanded": this.to ? 'false' : undefined, tabIndex: this.ldTabindex },
      h("div", { class: "ld-sidenav-navitem__bg", part: "bg" },
        h("div", { class: "ld-sidenav-navitem__bg-left" }),
        h("div", { class: "ld-sidenav-navitem__bg-center" }),
        h("div", { class: "ld-sidenav-navitem__bg-right" })),
      h("div", { class: "ld-sidenav-navitem__dot", part: "dot" }),
      h("div", { class: "ld-sidenav-navitem__slot-container-icon", role: "presentation", part: "slot-container-icon" },
        h("slot", { name: "icon" }),
        this.abbreviation && (h("span", { class: "ld-sidenav-navitem__abbr", part: "abbreviation" }, this.abbreviation)),
        h("ld-tooltip", { "show-delay": "250", tag: "span", ref: (el) => (this.tooltipRef = el), class: "ld-sidenav-navitem__tooltip", disabled: !this.sidenavCollapsed, arrow: true, position: this.sidenavAlignement === 'left' ? 'right middle' : 'left middle' },
          h("div", { class: "ld-sidenav-navitem__tooltip-trigger", slot: "trigger", onClick: this.onClick }),
          h("div", { class: "ld-sidenav-navitem__tooltip-content" },
            h("ld-typo", null, this.tooltipContent)))),
      h("div", { ref: (el) => (this.slotContainerRef = el), class: "ld-sidenav-navitem__slot-container", part: "slot-container" },
        h("slot", null)),
      h("div", { class: "ld-sidenav-navitem__slot-icon-secondary-container" },
        h("slot", { name: "icon-secondary" }))));
  }
  static get is() { return "ld-sidenav-navitem"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-sidenav-navitem.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-sidenav-navitem.css"]
  }; }
  static get properties() { return {
    "active": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets visual indicator to denote that the nav item is currently active."
      },
      "attribute": "active",
      "reflect": false,
      "defaultValue": "false"
    },
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Transforms the nav item to an anchor element."
      },
      "attribute": "href",
      "reflect": false
    },
    "mode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'secondary' | 'tertiary'",
        "resolved": "\"secondary\" | \"tertiary\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Display mode.\nIn secondary mode the navitem is less high, displays a filled dot\ninstead of the icon and is hidden when the sidenav collapses.\nThe tertiary mode is similar to secondary mode, with the navitem\nindented and the dot being empty and having a border."
      },
      "attribute": "mode",
      "reflect": false
    },
    "rounded": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Applies full border-radius."
      },
      "attribute": "rounded",
      "reflect": false,
      "defaultValue": "false"
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the button."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "target": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'_blank' | '_self' | '_parent' | '_top'",
        "resolved": "\"_blank\" | \"_parent\" | \"_self\" | \"_top\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The `target` attributed can be used in conjunction with the `href` attribute.\nSee [mdn docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)\nfor more information on the `target` attribute."
      },
      "attribute": "target",
      "reflect": false
    },
    "to": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Accepts an id of an ld-subnav component to navigate to it on click."
      },
      "attribute": "to",
      "reflect": true
    }
  }; }
  static get states() { return {
    "tooltipContent": {},
    "abbreviation": {},
    "sidenavAlignement": {},
    "sidenavClosable": {},
    "sidenavCollapsed": {},
    "sidenavExpandsOnMouseEnter": {}
  }; }
  static get events() { return [{
      "method": "ldSidenavNavitemTo",
      "name": "ldSidenavNavitemTo",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted on click if prop to is set."
      },
      "complexType": {
        "original": "{ id: string; label: string }",
        "resolved": "{ id: string; label: string; }",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets focus on the anchor or button",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get listeners() { return [{
      "name": "ldSidenavCollapsedChange",
      "method": "handleSidenavCollapsedChange",
      "target": "window",
      "capture": false,
      "passive": true
    }, {
      "name": "ldSidenavBreakpointChange",
      "method": "handleSidenavBreakpointChange",
      "target": "window",
      "capture": false,
      "passive": true
    }]; }
}
