import '../../../components'; // type definitions for type checks and intelliSense
import { Component, Element, h, Host, Method, State } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
import { closest } from '../../../utils/closest';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdAccordionPanel {
  constructor() {
    this.initialized = false;
    this.transitionEnabled = false;
    this.innerPanelExpanding = false;
    this.onTransitionEnd = (ev) => {
      if (ev.target === this.el) {
        this.innerPanelExpanding = false;
      }
    };
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async applyMaxHeight(additionalHeightFromInnerPanel = 0) {
    if (additionalHeightFromInnerPanel) {
      this.innerPanelExpanding = true;
    }
    // Apply max height on outer panel inside nested accordion.
    if (this.expanded) {
      const closestPanel = closest('ld-accordion-panel', this.el.parentElement);
      closestPanel === null || closestPanel === void 0 ? void 0 : closestPanel.applyMaxHeight(this.el.scrollHeight);
    }
    this.maxHeight = this.expanded
      ? this.el.scrollHeight + additionalHeightFromInnerPanel
      : 0;
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
    this.applyMaxHeight();
  }
  componentDidLoad() {
    setTimeout(() => {
      this.resizeObserver = new ResizeObserver(() => {
        // When a panel is expanding inside a nested accordion, the nested panel
        // takes over the responsibility for updating the max-height on the outer
        // panel. In other words: We disable the observer callback function in
        // order to instantly update the max-height for a better performance.
        if (!this.innerPanelExpanding) {
          this.applyMaxHeight();
        }
      });
      this.resizeObserver.observe(this.contentRef);
      this.initialized = true;
    });
  }
  disconnectedCallback() {
    this.resizeObserver.unobserve(this.contentRef);
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-panel',
      this.expanded && 'ld-accordion-panel--expanded',
      this.initialized && 'ld-accordion-panel--initialized',
    ]);
    return (h(Host, { style: { '--ld-accordion-panel-max-height': this.maxHeight + 'px' }, class: cl, onTransitionEnd: this.onTransitionEnd },
      h("div", { ref: (ref) => (this.contentRef = ref), class: "ld-accordion-panel__content" },
        h("slot", null))));
  }
  static get is() { return "ld-accordion-panel"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-accordion-panel.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-accordion-panel.css"]
  }; }
  static get states() { return {
    "expanded": {},
    "initialized": {},
    "transitionEnabled": {},
    "maxHeight": {},
    "resizeObserver": {},
    "innerPanelExpanding": {}
  }; }
  static get methods() { return {
    "applyMaxHeight": {
      "complexType": {
        "signature": "(additionalHeightFromInnerPanel?: number) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": [{
            "name": "internal",
            "text": "Updates expanded state."
          }]
      }
    },
    "setExpanded": {
      "complexType": {
        "signature": "(expanded: boolean) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": [{
            "name": "internal",
            "text": "Updates expanded state."
          }]
      }
    }
  }; }
  static get elementRef() { return "el"; }
}
