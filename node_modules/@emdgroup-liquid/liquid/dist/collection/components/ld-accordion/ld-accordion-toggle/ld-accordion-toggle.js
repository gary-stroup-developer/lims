import '../../../components'; // type definitions for type checks and intelliSense
import { Component, Element, Event, h, Host, Method, Prop, State, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 */
export class LdAccordionToggle {
  constructor() {
    /** Used as aria-label value on the toggle trigger element. */
    this.toggleLabel = 'Toggle';
    this.hasCustomIcon = false;
    this.handleToggleClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordiontoggleclick.emit();
    };
    this.handleLabelClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordionlabelclick.emit();
    };
  }
  /** Focuses the toggle */
  async focusInner() {
    this.btnRef.focus({ preventScroll: true });
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
  }
  componentWillLoad() {
    this.hasCustomIcon = !!this.el.querySelector('[slot="icon"]');
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-toggle',
      this.expanded && 'ld-accordion-toggle--expanded',
      this.split && 'ld-accordion-toggle--split',
    ]);
    const toggleTriggerContent = (h("div", { class: "ld-accordion-toggle__trigger-content" },
      h("slot", { name: "icon" }),
      !this.hasCustomIcon && (h("ld-icon", { name: "arrow-down", size: "sm", part: "trigger-icon", "aria-hidden": "true", class: "ld-accordion-toggle__trigger-icon" }))));
    const toggleTrigger = this.split ? (h("button", { part: "trigger focusable", class: "ld-accordion-toggle__trigger", "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, "aria-label": this.toggleLabel, onClick: this.handleToggleClick, ref: (el) => (this.btnRef = el) }, toggleTriggerContent)) : (h("div", { part: "trigger", class: "ld-accordion-toggle__trigger" }, toggleTriggerContent));
    const toggleLabel = this.split ? (h("button", { part: "label focusable", "aria-disabled": this.disabled ? 'true' : undefined, class: "ld-accordion-toggle__label", onClick: this.handleLabelClick },
      h("div", { class: "ld-accordion-toggle__label-content" },
        h("slot", null)))) : (h("div", { part: "label", class: "ld-accordion-toggle__label" },
      h("div", { class: "ld-accordion-toggle__label-content" },
        h("slot", null))));
    const toggleContent = (h("div", { part: "content", class: "ld-accordion-toggle__content" },
      toggleLabel,
      toggleTrigger));
    const toggle = this.split ? (h("div", { part: "toggle focusable", class: "ld-accordion-toggle__button" }, toggleContent)) : (h("button", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "ld-accordion-toggle__button", onClick: this.handleToggleClick, part: "toggle focusable", ref: (el) => (this.btnRef = el), "tab-index": this.ldTabindex }, toggleContent));
    return h(Host, { class: cl }, toggle);
  }
  static get is() { return "ld-accordion-toggle"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-accordion-toggle.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-accordion-toggle.css"]
  }; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disables the toggle."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "ldTabindex": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number | undefined",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Tab index of the toggle."
      },
      "attribute": "ld-tabindex",
      "reflect": false
    },
    "split": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Split the toggle in two parts with the second part containing\nthe caret icon and being responsible for expanding / collapsing\nthe accordion panel."
      },
      "attribute": "split",
      "reflect": false
    },
    "toggleLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Used as aria-label value on the toggle trigger element."
      },
      "attribute": "toggle-label",
      "reflect": false,
      "defaultValue": "'Toggle'"
    }
  }; }
  static get states() { return {
    "expanded": {},
    "hasCustomIcon": {}
  }; }
  static get events() { return [{
      "method": "ldaccordiontoggleclick",
      "name": "ldaccordiontoggleclick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted on click of the accordion toggle trigger."
      },
      "complexType": {
        "original": "undefined",
        "resolved": "undefined",
        "references": {}
      }
    }, {
      "method": "ldaccordionlabelclick",
      "name": "ldaccordionlabelclick",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emitted on click of the accordion toggle label."
      },
      "complexType": {
        "original": "undefined",
        "resolved": "undefined",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "focusInner": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Focuses the toggle",
        "tags": []
      }
    },
    "setExpanded": {
      "complexType": {
        "signature": "(expanded: boolean) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": [{
            "name": "internal",
            "text": "Updates expanded state."
          }]
      }
    }
  }; }
  static get elementRef() { return "el"; }
}
