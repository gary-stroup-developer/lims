import '../../components'; // type definitions for type checks and intelliSense
import { Component, h, Prop, Host } from '@stencil/core';
/**
 * @virtualProp ref - reference to component
 * @virtualProp {string | number} key - for tracking the node's identity when working with lists
 * @part headline - `ld-typo` element used for the headline
 * @part icon - Image tag used for the icon
 */
export class LdNotice {
  constructor() {
    /** Mode of the notice. */
    this.mode = 'info';
  }
  render() {
    return (h(Host, { class: `ld-notice ld-notice--${this.mode}` },
      h("ld-icon", { class: "ld-notice__icon", name: "info", part: "icon", size: "lg" }),
      this.headline && (h("ld-typo", { class: "ld-notice__headline", variant: "h4", tag: "p", part: "headline" }, this.headline)),
      h("slot", null)));
  }
  static get is() { return "ld-notice"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-notice.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-notice.css"]
  }; }
  static get properties() { return {
    "headline": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Headline of the notice."
      },
      "attribute": "headline",
      "reflect": false
    },
    "mode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'error' | 'info' | 'warning'",
        "resolved": "\"error\" | \"info\" | \"warning\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Mode of the notice."
      },
      "attribute": "mode",
      "reflect": false,
      "defaultValue": "'info'"
    }
  }; }
}
