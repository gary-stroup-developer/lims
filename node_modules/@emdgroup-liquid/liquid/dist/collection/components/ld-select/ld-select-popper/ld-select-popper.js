import '../../../components'; // type definitions for type checks and intelliSense
import { Component, Element, h, Host, Method, Prop, State, Watch, } from '@stencil/core';
import { getClassNames } from '../../../utils/getClassNames';
/** @internal **/
export class LdSelectPopper {
  constructor() {
    /**
     * Indicates if select element is expanded.
     */
    this.expanded = false;
    this.isPinned = false;
    this.shadowHeight = '100%';
  }
  updatePinnedState() {
    this.isPinned = this.el.classList.contains('ld-tether-pinned');
  }
  updatePopperTheme(newValue, oldValue) {
    this.el.classList.remove(`ld-theme-${oldValue}`);
    if (newValue)
      this.el.classList.add(`ld-theme-${newValue}`);
  }
  /**
   * Focuses the tab
   */
  async updateShadowHeight(height) {
    this.shadowHeight = height;
  }
  componentWillLoad() {
    this.popperClass && this.el.classList.add(this.popperClass);
  }
  render() {
    return (h(Host, { style: {
        zIndex: this.isPinned ? '2147483647' : '2147483646',
        display: this.expanded ? 'block' : 'none',
      } },
      h("div", { class: getClassNames([
          'ld-select-popper',
          this.expanded && 'ld-select-popper--expanded',
          this.detached && 'ld-select-popper--detached',
          this.size && `ld-select-popper--${this.size}`,
          this.isPinned && 'ld-select-popper--pinned',
        ]), part: "popper" },
        h("div", { class: "ld-select-popper__scroll-container", part: "popper-scroll-container" },
          h("slot", null),
          h("div", { class: "ld-select-popper__shadow", style: { height: this.isPinned ? '100%' : this.shadowHeight }, part: "shadow" })))));
  }
  static get is() { return "ld-select-popper"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["ld-select-popper.css"]
  }; }
  static get styleUrls() { return {
    "$": ["ld-select-popper.css"]
  }; }
  static get properties() { return {
    "expanded": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Indicates if select element is expanded."
      },
      "attribute": "expanded",
      "reflect": false,
      "defaultValue": "false"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "'sm' | 'lg'",
        "resolved": "\"lg\" | \"sm\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Size of the select trigger button (required for applying the correct shadow height)."
      },
      "attribute": "size",
      "reflect": false
    },
    "detached": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Popper is visually detached from the select trigger element (there's a gap between the two)."
      },
      "attribute": "detached",
      "reflect": false
    },
    "theme": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Since the select popper is located outside the select element, the theme needs to be applied as a prop."
      },
      "attribute": "theme",
      "reflect": false
    },
    "popperClass": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Attaches CSS class to the select popper element."
      },
      "attribute": "popper-class",
      "reflect": false
    },
    "class": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "A watcher is applied to the CSS class in order to be able to react to tether changes."
      },
      "attribute": "class",
      "reflect": true
    }
  }; }
  static get states() { return {
    "isPinned": {},
    "shadowHeight": {}
  }; }
  static get methods() { return {
    "updateShadowHeight": {
      "complexType": {
        "signature": "(height: string) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Focuses the tab",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "class",
      "methodName": "updatePinnedState"
    }, {
      "propName": "theme",
      "methodName": "updatePopperTheme"
    }]; }
}
