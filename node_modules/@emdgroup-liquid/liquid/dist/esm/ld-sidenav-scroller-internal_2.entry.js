import { r as registerInstance, h, H as Host, g as getElement } from './index-18aa7cbc.js';
import { g as getClassNames } from './getClassNames-3dd92841.js';
import { c as closest } from './closest-f8c9df4c.js';
import { t as toggleStackToTop } from './toggleStackToTop-540411fb.js';

const ldSidenavScrollerInternalCss = ":host{--ld-scroll-shadow-height:1.5rem;--ld-scroll-shadow-intensity:0.1;overflow-x:hidden;overflow-y:auto;overflow:hidden auto;overscroll-behavior:contain;height:100%;width:100%;padding-right:var(--ld-sp-32);display:flex;flex-direction:column}:host ::slotted(ld-sidenav-navitem){margin:var(--ld-sidenav-padding-y) 0 0;will-change:opacity}:host ::slotted(ld-sidenav-navitem:last-of-type){margin-bottom:var(--ld-sidenav-padding-y)}:host(.ld-sidenav-scroller-internal--relative){position:relative}:host(.ld-sidenav-scroller-internal--relative) .ld-sidenav-scroller-internal__hr-bottom,:host(.ld-sidenav-scroller-internal--relative) .ld-sidenav-scroller-internal__hr-top{position:sticky}:host(.ld-sidenav-scroller-internal--collapsed) .ld-sidenav-scroller-internal__shadow-bottom,:host(.ld-sidenav-scroller-internal--collapsed) .ld-sidenav-scroller-internal__shadow-top{transform:translateX(calc(var(--ld-sidenav-translate-x-direction)*(50% - var(--ld-sidenav-width-collapsed)*0.5)))}.ld-sidenav-scroller-internal__shadow-bottom,.ld-sidenav-scroller-internal__shadow-top{position:sticky;pointer-events:none;height:0;width:100%;z-index:1;opacity:0;left:0;transition:opacity var(--ld-sidenav-transition-duration) linear,transform var(--ld-sidenav-transition-duration) ease}.ld-sidenav-scroller-internal__shadow-bottom:after,.ld-sidenav-scroller-internal__shadow-top:after{content:\"\";display:block;width:100%;height:var(--ld-scroll-shadow-height)}.ld-sidenav-scroller-internal__shadow-top{top:0}.ld-sidenav-scroller-internal__shadow-top:after{background:radial-gradient(farthest-side at 50%,at 0,rgb(0,0,0,var(--ld-scroll-shadow-intensity)),transparent) 0 100% no-repeat;background:radial-gradient(farthest-side at 50% 0,rgb(0,0,0,var(--ld-scroll-shadow-intensity)),transparent) 0 100% no-repeat}.ld-sidenav-scroller-internal__shadow-bottom{top:100%}.ld-sidenav-scroller-internal__shadow-bottom:after{background:radial-gradient(farthest-side at 50%,at 100%,rgb(0,0,0,var(--ld-scroll-shadow-intensity)),transparent) 0 100% no-repeat;background:radial-gradient(farthest-side at 50% 100%,rgb(0,0,0,var(--ld-scroll-shadow-intensity)),transparent) 0 100% no-repeat;transform:translateY(-100%)}.ld-sidenav-scroller-internal__hr-bottom,.ld-sidenav-scroller-internal__hr-top{margin-top:0;position:absolute;width:calc(100% - var(--ld-sidenav-padding-y)*2)}.ld-sidenav-scroller-internal__hr-top{top:0}.ld-sidenav-scroller-internal__hr-bottom{top:calc(100% - var(--ld-sp-1)*1.5)}";

let LdSidenavScrollerInternal = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.hasShadowBottom = false;
    this.hasShadowTop = false;
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavCollapsed = ev.detail;
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
  }
  /**
   * Makes shadows either appear or disappear on top and bottom of the
   * scroll container, depending on the current scroll position.
   */
  async updateShadows() {
    const scrollContainer = this.el;
    if (!scrollContainer)
      return;
    this.hasShadowBottom =
      scrollContainer.scrollTop <
        scrollContainer.scrollHeight - scrollContainer.clientHeight - 10;
    this.hasShadowTop = scrollContainer.scrollTop > 10;
  }
  /** Scrolls the scroll container to the top instantly. */
  async scrollToTop(smoothly = false) {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    try {
      this.el.scrollTo({
        top: 0,
        behavior: smoothly && !prefersReducedMotion ? 'smooth' : 'auto',
      });
    }
    catch (err) {
      // js-dom seems to not know scrollTo - ignoring for now
    }
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    this.needsHRTop = !!this.sidenav.querySelector('[slot="top"]');
    this.needsHRBottom = !!this.sidenav.querySelector('[slot="bottom"]');
    this.relative = !this.sidenav.querySelector('ld-sidenav-slider');
  }
  componentDidLoad() {
    setTimeout(() => {
      this.updateShadows();
    });
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-scroller-internal',
      this.relative && 'ld-sidenav-scroller-internal--relative',
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-scroller-internal--collapsed',
    ]);
    return (h(Host, { class: cl, onScroll: this.updateShadows.bind(this), "data-needs-bottom": this.needsHRBottom, "data-needs-top": this.needsHRTop }, h("div", { class: "ld-sidenav-scroller-internal__shadow-top", style: { opacity: this.hasShadowTop ? '1' : '0' }, part: "shadow-top" }), h("div", { class: "ld-sidenav-scroller-internal__shadow-bottom", style: { opacity: this.hasShadowBottom ? '1' : '0' }, part: "shadow-bottom" }), this.needsHRTop && (h("ld-sidenav-separator", { class: "ld-sidenav-scroller-internal__hr-top", style: { opacity: this.hasShadowTop ? '0' : '1' } })), this.needsHRBottom && (h("ld-sidenav-separator", { class: "ld-sidenav-scroller-internal__hr-bottom", style: { opacity: this.hasShadowBottom ? '0' : '1' } })), h("slot", null)));
  }
  get el() { return getElement(this); }
};
LdSidenavScrollerInternal.style = ldSidenavScrollerInternalCss;

const ldSidenavSeparatorCss = ":host{margin:var(--ld-sidenav-padding-y) var(--ld-sidenav-padding-x) 0;transform-origin:left;transition:transform var(--ld-sidenav-transition-duration-collapse-expand) ease}:host hr{border:0;border-radius:var(--ld-br-full);height:var(--ld-sp-1);margin:0;transform:scaleY(1.5);transition:transform var(--ld-sidenav-transition-duration-collapse-expand) ease;background-color:var(--ld-col-neutral-100)}:host(.ld-sidenav-separator--collapsed){transform:translateX(var(--ld-sidenav-translate-x-delta)) scaleX(var(--ld-sidenav-separator-scale-x-collapsed))}:host(.ld-sidenav-separator--collapsed) hr{transform:translateY(var(--ld-slider-navitem-move-up,0)) scaleY(1.5);transition:transform var(--ld-sidenav-transition-duration-collapse-expand) var(--ld-sidenav-transition-delay-collapse-expand) ease}";

let LdSidenavSeparator = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.computeScaleXCollapsed = () => {
      const sidenavWidth = parseFloat(window
        .getComputedStyle(this.sidenav)
        .getPropertyValue('--ld-sidenav-width'));
      const sidenavPaddingX = parseFloat(window
        .getComputedStyle(this.sidenav)
        .getPropertyValue('--ld-sidenav-padding-x'));
      const sidenavNavitemIconSize = parseFloat(window
        .getComputedStyle(this.sidenav)
        .getPropertyValue('--ld-sidenav-navitem-icon-size'));
      return sidenavNavitemIconSize / (sidenavWidth - 2 * sidenavPaddingX);
    };
  }
  handleSidenavCollapsedChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    if (this.el.parentElement &&
      !['LD-SIDENAV-SLIDER', 'LD-SIDENAV-SUBNAV'].includes(this.el.parentElement.tagName)) {
      return;
    }
    this.sidenavCollapsed = ev.detail;
    if (this.sidenav.narrow) {
      toggleStackToTop(this.el, this.sidenavCollapsed);
    }
  }
  handleSidenavBreakpointChange(ev) {
    if (ev.target !== this.sidenav)
      return;
    this.sidenavClosable = ev.detail;
  }
  componentWillLoad() {
    this.sidenav = closest('ld-sidenav', this.el);
    this.scaleXCollapsed = this.computeScaleXCollapsed() || 1;
  }
  render() {
    const cl = getClassNames([
      'ld-sidenav-separator',
      this.sidenavCollapsed &&
        !this.sidenavClosable &&
        'ld-sidenav-separator--collapsed',
    ]);
    return (h(Host, { style: {
        '--ld-sidenav-separator-scale-x-collapsed': this.scaleXCollapsed.toString(),
      }, class: cl }, h("hr", { class: "ld-sidenav-separator-line", part: "hr" })));
  }
  get el() { return getElement(this); }
};
LdSidenavSeparator.style = ldSidenavSeparatorCss;

export { LdSidenavScrollerInternal as ld_sidenav_scroller_internal, LdSidenavSeparator as ld_sidenav_separator };
