import { r as registerInstance, c as createEvent, h, H as Host } from './index-18aa7cbc.js';
import { g as getClassNames } from './getClassNames-3dd92841.js';

const ldPaginationCss = ".ld-pagination{--ld-pagination-sm-item-size:2rem;--ld-pagination-md-item-size:2.5rem;--ld-pagination-lg-item-size:3.125rem;--ld-pagination-column-size:calc(var(--ld-pagination-item-size) + var(--ld-pagination-items-space));--ld-pagination-more-indicator-font:var(--ld-typo-body-m);--ld-pagination-item-size:var(--ld-pagination-md-item-size);--ld-pagination-items-space:var(--ld-sp-4);align-items:center;display:inline-flex;list-style:none;margin:0;overflow:hidden;padding:var(--ld-sp-1);position:relative}.ld-pagination--sm{--ld-pagination-more-indicator-font:var(--ld-typo-body-s);--ld-pagination-item-size:var(--ld-pagination-sm-item-size)}.ld-pagination--lg{--ld-pagination-more-indicator-font:var(--ld-typo-body-l);--ld-pagination-item-size:var(--ld-pagination-lg-item-size)}.ld-pagination__arrow:not(:last-child),.ld-pagination__sticky{margin-right:var(--ld-pagination-items-space)}.ld-pagination__item,.ld-pagination__sticky{width:var(--ld-pagination-item-size)}.ld-pagination__item ld-button::part(button),.ld-pagination__sticky ld-button::part(button){padding:0}.ld-pagination__item,.ld-pagination__more-indicator{opacity:0;transition:opacity .1s linear}.ld-pagination__item--visible,.ld-pagination__more-indicator--visible{opacity:1}.ld-pagination__more-indicator{color:var(--ld-thm-primary);font:var(--ld-pagination-more-indicator-font);font-weight:700;height:var(--ld-pagination-item-size);line-height:1;pointer-events:none;position:relative}.ld-pagination__more-indicator--end{right:var(--ld-pagination-column-size)}.ld-pagination__more-indicator span{align-items:center;justify-content:center;display:flex;height:100%;position:absolute;white-space:nowrap;width:var(--ld-pagination-item-size)}.ld-pagination__slide-wrapper{height:var(--ld-pagination-item-size);position:relative;width:calc(var(--ld-pagination-slider-cols)*var(--ld-pagination-column-size))}.ld-pagination__items{display:inline-flex;list-style:none;padding:0;pointer-events:none;position:absolute;transform:translateX(calc(var(--ld-pagination-slide-index)*var(--ld-pagination-column-size)*-1));transition:transform .1s ease}.ld-pagination__item{left:calc(var(--ld-pagination-item-pos)*var(--ld-pagination-column-size));position:absolute}.ld-pagination__item--visible{pointer-events:auto}.ld-pagination__item--selected ld-button{--ld-button-bg-color:transparent}.ld-pagination__item--selected ld-button::part(button){color:var(--thm-primary-active);font-weight:900}.ld-pagination__marker{background:var(--ld-thm-primary-alpha-lowest);border-radius:var(--ld-br-m);height:var(--ld-pagination-item-size);position:absolute;width:var(--ld-pagination-item-size);z-index:-1;transform:translateX(calc(var(--ld-pagination-column-size)*var(--ld-pagination-selected-index)));transition:transform .1s ease}";

const BUFFER_SIZE = 20;
let LdPagination = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ldchange = createEvent(this, "ldchange", 7);
    /** Hide the buttons to navigate forward/backward. */
    this.hidePrevNext = false;
    /** Hide the buttons to navigate to the first/last item. */
    this.hideStartEnd = false;
    /** Label to communicate the type of an item. */
    this.itemLabel = 'Page';
    /** The number of items/pages available for pagination (required to let the user jump to the last item/page). */
    this.length = Infinity;
    /** The currently selected item (an index of `-1` means nothing is selected). */
    this.selectedIndex = 0;
    /** Number of next/previous items visible. */
    this.offset = 2;
    /** Number of items permanently visible at the start/end. */
    this.sticky = 0;
    this.maxSliderColumns = 0;
    this.renderMoreIndicators = false;
    this.renderSticky = false;
    this.slidableItems = [];
    this.sliderContent = [];
    this.visibleItemsInSlider = 0;
    // pageNumber is 1-based
    this.renderItem = (itemNumber, showFrom, showTo) => {
      const isHidden = this.renderMoreIndicators &&
        (itemNumber < showFrom || itemNumber > showTo);
      const isSelected = itemNumber === this.selectedIndex + 1;
      return (h("li", { "aria-hidden": isHidden ? 'true' : undefined, class: getClassNames([
          'ld-pagination__item',
          !isHidden && 'ld-pagination__item--visible',
          isSelected && 'ld-pagination__item--selected',
        ]), key: itemNumber, style: { '--ld-pagination-item-pos': `${itemNumber - 1}` } }, h("ld-button", { "aria-current": isSelected ? 'true' : undefined, "aria-label": isHidden ? undefined : `${this.itemLabel} ${itemNumber}`, "ld-tabindex": isHidden ? -1 : undefined, mode: "ghost", onClick: () => {
          this.selectedIndex = itemNumber - 1;
        }, part: "item focusable", size: this.size }, itemNumber)));
    };
    this.calculateSliderContent = () => {
      const directlyReachableFirstItems = this.maxSliderColumns + this.sticky - 1;
      const directlyReachableLastItems = this.length - this.maxSliderColumns - this.sticky + 1;
      this.sliderContent = this.slidableItems.filter((itemNumber) => (itemNumber > this.selectedIndex - BUFFER_SIZE &&
        itemNumber <= this.selectedIndex + BUFFER_SIZE) ||
        // render the first/last items in case the user can navigate there directly
        ((!this.hideStartEnd || this.sticky > 0) &&
          (itemNumber <= directlyReachableFirstItems ||
            itemNumber > directlyReachableLastItems)));
    };
  }
  handleSelectedIndex() {
    if (this.selectedIndex < 0) {
      this.selectedIndex = 0;
    }
    else if (this.selectedIndex >= this.length) {
      this.selectedIndex = this.length - 1;
    }
    else {
      this.ldchange.emit(this.selectedIndex);
    }
  }
  componentWillLoad() {
    this.visibleItemsInSlider = this.offset * 2 + 1;
    const maxVisibleItems = this.sticky * 2 + this.visibleItemsInSlider;
    this.maxSliderColumns = this.visibleItemsInSlider + 2;
    this.renderSticky = this.sticky > 0;
    this.renderMoreIndicators = this.length > maxVisibleItems + 2;
    this.slidableItems = Array.from({
      length: this.length === Infinity ? 9999 : this.length - this.sticky * 2,
    }).map((_, index) => index + this.sticky + 1);
    if (this.length < 1) {
      this.length = 1;
    }
    if (this.selectedIndex < 0) {
      this.selectedIndex = 0;
    }
    else if (this.selectedIndex >= this.length) {
      this.selectedIndex = this.length - 1;
    }
    this.calculateSliderContent();
  }
  render() {
    // +1 because it must be the index right to the centered item
    const showStartMoreIndicator = this.renderMoreIndicators &&
      this.selectedIndex > this.sticky + this.offset + 1;
    // -1 because it is 0-based and another -1 because it must be the index left to the centered item
    const showEndMoreIndicator = this.renderMoreIndicators &&
      this.selectedIndex < this.length - this.offset - this.sticky - 2;
    const showFrom = 
    // +1 because it is not 0-based
    Math.max(Math.min(this.selectedIndex -
      this.offset -
      // start hiding numbers
      (showStartMoreIndicator ? 0 : 1), this.length - this.visibleItemsInSlider - this.sticky - 1), this.sticky) + 1;
    // +1 because it is not 0-based
    const showTo = Math.min(Math.max(this.selectedIndex + (showEndMoreIndicator ? 0 : 1), this.offset + this.sticky + 1) + this.offset, this.length - this.sticky) + 1;
    return (h(Host, { role: "navigation" }, h("ul", { "aria-label": "Pagination", class: getClassNames([
        'ld-pagination',
        this.size && `ld-pagination--${this.size}`,
      ]), part: "wrapper" }, !this.hideStartEnd && (h("li", { class: "ld-pagination__arrow" }, h("ld-button", { "aria-label": this.startLabel
        ? undefined
        : `First ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex < 1 ? true : undefined, mode: "ghost", onClick: () => {
        this.selectedIndex = 0;
      }, part: "arrow start focusable", size: this.size }, this.startLabel ? (this.startLabel) : (h("ld-icon", { name: "arrow-double-left", size: this.size }))))), !this.hidePrevNext && (h("li", { class: "ld-pagination__arrow" }, h("ld-button", { "aria-label": this.prevLabel
        ? undefined
        : `Previous ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex < 1, mode: "ghost", onClick: () => {
        this.selectedIndex -= 1;
      }, part: "arrow prev focusable", size: this.size }, this.prevLabel ? (this.prevLabel) : (h("ld-icon", { name: "arrow-left", size: this.size }))))), this.renderSticky &&
      Array.from({ length: Math.min(this.sticky, this.length) }).map((_, index) => {
        return (h("li", { class: "ld-pagination__sticky" }, h("ld-button", { "aria-label": `${this.itemLabel} ${index + 1}`, mode: "ghost", onClick: () => {
            this.selectedIndex = index;
          }, part: "sticky item focusable", size: this.size }, index + 1)));
      }), this.renderMoreIndicators && (h("li", { class: getClassNames([
        'ld-pagination__more-indicator',
        showStartMoreIndicator &&
          'ld-pagination__more-indicator--visible',
      ]), part: "more-indicator" }, h("span", null, ". . ."))), h("li", { class: "ld-pagination__slide-wrapper", part: "slide-wrapper", style: {
        '--ld-pagination-slider-cols': `${Math.min(this.slidableItems.length, this.maxSliderColumns)}`,
      } }, h("ul", { class: "ld-pagination__items", part: "items", style: {
        '--ld-pagination-slide-index': `${Math.max(Math.min(this.selectedIndex - this.offset - 1, 
        // -1 because of the "..." and another -1 because it is 0-based
        this.length - this.visibleItemsInSlider - this.sticky - 2), 
        // marker position in case of length < sticky
        Math.min(this.sticky, this.length), 0)}`,
      } }, h("li", { class: "ld-pagination__marker", key: "marker", onTransitionEnd: this.calculateSliderContent, part: "marker", style: {
        '--ld-pagination-selected-index': `${this.selectedIndex}`,
      } }), this.length > 0 &&
      this.sliderContent.map((itemNumber) => this.renderItem(itemNumber, showFrom, showTo)))), this.renderMoreIndicators && (h("li", { class: getClassNames([
        'ld-pagination__more-indicator ld-pagination__more-indicator--end',
        showEndMoreIndicator &&
          'ld-pagination__more-indicator--visible',
      ]), part: "more-indicator" }, h("span", null, ". . ."))), this.renderSticky &&
      this.length < Infinity &&
      Array.from({ length: this.sticky })
        .map((_, index) => {
        const itemNumber = this.length - index;
        if (itemNumber <= this.sticky) {
          return null;
        }
        return (h("li", { class: "ld-pagination__sticky" }, h("ld-button", { mode: "ghost", onClick: () => {
            this.selectedIndex = itemNumber - 1;
          }, part: "sticky item focusable", size: this.size }, itemNumber)));
      })
        .reverse(), !this.hidePrevNext && (h("li", { class: "ld-pagination__arrow" }, h("ld-button", { "aria-label": this.nextLabel
        ? undefined
        : `Next ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex >= this.length - 1, mode: "ghost", onClick: () => {
        this.selectedIndex += 1;
      }, part: "arrow next focusable", size: this.size }, this.nextLabel ? (this.nextLabel) : (h("ld-icon", { name: "arrow-right", size: this.size }))))), this.length < Infinity && !this.hideStartEnd && (h("li", { class: "ld-pagination__arrow" }, h("ld-button", { "aria-label": this.endLabel
        ? undefined
        : `Last ${this.itemLabel.toLocaleLowerCase()}`, disabled: this.selectedIndex >= this.length - 1, mode: "ghost", onClick: () => {
        this.selectedIndex = this.length - 1;
      }, part: "arrow end focusable", size: this.size }, this.endLabel ? (this.endLabel) : (h("ld-icon", { name: "arrow-double-right", size: this.size }))))))));
  }
  static get assetsDirs() { return ["assets"]; }
  static get watchers() { return {
    "selectedIndex": ["handleSelectedIndex"],
    "length": ["componentWillLoad"],
    "offset": ["componentWillLoad"],
    "sticky": ["componentWillLoad"]
  }; }
};
LdPagination.style = ldPaginationCss;

export { LdPagination as ld_pagination };
