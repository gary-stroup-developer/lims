import { r as registerInstance, h, H as Host, g as getElement } from './index-18aa7cbc.js';
import { g as getClassNames } from './getClassNames-3dd92841.js';

const ldTablistCss = ":host{--ld-tablist-max-height:2.5rem;--ld-tablist-border-col:var(--ld-col-neutral-100);--ld-tablist-border-height:0.1875rem;--ld-tablist-btn-scroll-col:var(--ld-col-neutral-900);--ld-tablist-btn-scroll-col-active:var(--ld-col-neutral-900);--ld-tablist-btn-scroll-bg-col:var(--ld-col-neutral-010);--ld-tablist-btn-scroll-bg-col-hover:var(--ld-col-neutral-100);--ld-tablist-btn-scroll-bg-col-active:var(--ld-col-neutral-300);--ld-tablist-border-brand-col:var(--ld-thm-primary-hover);--ld-tablist-btn-scroll-bg-brand-col-active:var(--ld-thm-primary-active);--ld-tablist-btn-scroll-bg-brand-col-hover:var(--ld-thm-primary-hover);--ld-tablist-btn-scroll-bg-brand-col:var(--ld-thm-primary);--ld-tab-bg-brand-col-active:var(--ld-thm-primary-active);--ld-tab-bg-brand-col-focus:var(--ld-thm-primary-focus);--ld-tab-bg-brand-col-hover:var(--ld-thm-primary-hover);--ld-tab-bg-brand-col:var(--ld-thm-primary);--ld-tab-text-brand-col-focus:var(--ld-thm-primary-active);--ld-tab-disabled-bg-brand-col-focus:var(--ld-thm-primary-active);--ld-tab-disabled-text-brand-col-focus:var(--ld-thm-primary);--ld-tab-disabled-text-brand-col:var(--ld-thm-primary-focus);--ld-tab-selected-border-brand-col:var(--ld-thm-secondary)}.ld-tablist{position:relative;display:flex;overflow:hidden;z-index:0;background-color:var(--ld-tablist-btn-scroll-bg-col);max-height:var(--ld-tablist-max-height)}.ld-tablist:after{content:\"\";position:absolute;top:auto;right:0;bottom:0;left:0;height:var(--ld-tablist-border-height);background-color:var(--ld-tablist-border-col);z-index:2}.ld-tablist--rounded-all{border-radius:var(--ld-br-m)}.ld-tablist--rounded-all-lg{border-radius:var(--ld-br-l)}.ld-tablist--rounded-top{border-radius:var(--ld-br-m) var(--ld-br-m) 0 0}.ld-tablist--rounded-top-lg{border-radius:var(--ld-br-l) var(--ld-br-l) 0 0}.ld-tablist ::slotted(ld-tab){--ld-tab-indicator-height:var(--ld-tablist-border-height)}.ld-tablist--sm{--ld-tablist-max-height:2rem}.ld-tablist--sm ::slotted(ld-tab){--ld-tab-font:var(--ld-typo-body-s);--ld-tab-gap:0.375rem;--ld-tab-min-height:2rem;--ld-tab-padding-x:0.625rem;--ld-tab-padding-y:0.5rem}.ld-tablist--lg{--ld-tablist-max-height:3.125rem}.ld-tablist--lg ::slotted(ld-tab){--ld-tab-font:var(--ld-typo-body-l);--ld-tab-gap:0.875rem;--ld-tab-min-height:3.125rem;--ld-tab-padding-x:1.3125rem;--ld-tab-padding-y:0.75rem}.ld-tablist--ghost{--ld-tablist-btn-scroll-bg-col:transparent}.ld-tablist--ghost ::slotted(ld-tab){--ld-tab-bg-col:transparent}.ld-tablist--brand-color{--ld-tablist-btn-scroll-col-active:var(--ld-col-wht);--ld-tablist-btn-scroll-col:var(--ld-col-wht);--ld-tablist-btn-scroll-bg-col:var(--ld-tablist-btn-scroll-bg-brand-col);--ld-tablist-btn-scroll-bg-col-hover:var(--ld-tablist-btn-scroll-bg-brand-col-hover);--ld-tablist-btn-scroll-bg-col-active:var(--ld-tablist-btn-scroll-bg-brand-col-active);--ld-tablist-border-col:var(--ld-tablist-border-brand-col)}.ld-tablist--brand-color ::slotted(ld-tab){--ld-tab-disabled-opacity:0.5;--ld-tab-disabled-content-opacity:1;--ld-tab-selected-text-col-focus:var(--ld-col-wht);--ld-tab-selected-text-col:var(--ld-col-wht);--ld-tab-text-col:var(--ld-col-wht);--ld-tab-bg-col:var(--ld-tab-bg-brand-col);--ld-tab-bg-col-focus:var(--ld-tab-bg-brand-col-focus);--ld-tab-bg-col-hover:var(--ld-tab-bg-brand-col-hover);--ld-tab-bg-col-active:var(--ld-tab-bg-brand-col-active);--ld-tab-disabled-bg-col-focus:var(--ld-tab-disabled-bg-brand-col-focus);--ld-tab-disabled-text-col-focus:var(--ld-tab-disabled-text-brand-col-focus);--ld-tab-disabled-text-col:var(--ld-tab-disabled-text-brand-col);--ld-tab-selected-border-col-focus:var(--ld-tab-selected-border-col);--ld-tab-selected-border-col:var(--ld-tab-selected-border-brand-col);--ld-tab-text-col-focus:var(--ld-tab-text-brand-col-focus)}.ld-tablist__scroll-container{display:flex;overflow-x:auto;scroll-snap-type:x mandatory;padding-bottom:4rem;margin-bottom:-4rem}.ld-tablist__btn-scroll{position:relative;border:0;text-decoration:none;-webkit-user-select:none;user-select:none;touch-action:manipulation;justify-content:center;align-items:center;-webkit-touch-callout:none;color:var(--ld-tablist-btn-scroll-col);background-color:var(--ld-tablist-btn-scroll-bg-col);box-shadow:var(--ld-shadow-active);width:var(--ld-sp-32);z-index:2}.ld-tablist__btn-scroll:focus:focus-visible{outline:none}.ld-tablist__btn-scroll[aria-disabled=true] svg{opacity:.25}.ld-tablist__btn-scroll:where(:not([aria-disabled=true])){cursor:pointer}@media (hover:hover){.ld-tablist__btn-scroll:where(:not([aria-disabled=true])):hover{background-color:var(--ld-tablist-btn-scroll-bg-col-hover)}}.ld-tablist__btn-scroll:where(:not([aria-disabled=true])):active:focus,.ld-tablist__btn-scroll:where(:not([aria-disabled=true])):active:focus:focus-visible{color:var(--ld-tablist-btn-scroll-col-active);background-color:var(--ld-tablist-btn-scroll-bg-col-active)}.ld-tablist__btn-scroll--left{left:0}.ld-tablist__btn-scroll--right{right:0}";

let LdTablist = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  handleWindowResize() {
    this.updateScrollable();
    this.updateScrollButtons();
  }
  updateScrollable() {
    const scrollButtonsWidth = 2 * this.btnScrollLeftRef.getBoundingClientRect().width;
    const scrollContainerWidth = this.slotContainerRef.getBoundingClientRect().width;
    const contentWidth = Array.from(this.el.children)
      .map((child) => child.getBoundingClientRect().width)
      .reduce((a, b) => a + b);
    this.scrollable =
      scrollContainerWidth + (this.scrollable ? scrollButtonsWidth : 0) <
        contentWidth;
  }
  updateScrollButtons() {
    if (!this.scrollable)
      return;
    this.scrollLeftEnabled = this.slotContainerRef.scrollLeft > 0;
    this.scrollRightEnabled =
      this.slotContainerRef.scrollLeft +
        this.slotContainerRef.getBoundingClientRect().width -
        this.slotContainerRef.scrollWidth <
        0;
  }
  scroll(dir) {
    this.slotContainerRef.scrollTo({
      left: this.slotContainerRef.scrollLeft +
        ((dir === 'left' ? -1 : 1) *
          this.slotContainerRef.getBoundingClientRect().width) /
          2,
      behavior: 'smooth',
    });
  }
  focusTab(prevLdTab, dir) {
    const currentTab = dir === 'left'
      ? prevLdTab.previousElementSibling
      : prevLdTab.nextElementSibling;
    if (currentTab) {
      currentTab.focusInner();
      currentTab.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline: 'center',
      });
    }
  }
  setFocusOnSelectedTabpanel() {
    var _a;
    // TODO: fix Stencils DOM implementation for unit testing and replace
    // ;(this.el
    //   .closest('ld-tabs')
    //   .querySelector('ld-tabpanel:not([hidden])') as HTMLElement)?.focus()
    (_a = Array.from(this.el.closest('ld-tabs').querySelectorAll('ld-tabpanel'))
      .find((tabpanel) => !tabpanel.hasAttribute('hidden'))) === null || _a === void 0 ? void 0 : _a.focus();
  }
  onKeydown(ev) {
    switch (ev.key) {
      case 'ArrowLeft':
        ev.preventDefault();
        this.focusTab(ev.target, 'left');
        return;
      case 'ArrowRight': {
        ev.preventDefault();
        this.focusTab(ev.target, 'right');
        return;
      }
      case 'ArrowDown': {
        ev.preventDefault();
        this.setFocusOnSelectedTabpanel();
        return;
      }
    }
  }
  componentWillLoad() {
    this.el.querySelectorAll('ld-icon').forEach((icon) => {
      if (this.size !== undefined) {
        icon.setAttribute('size', this.size);
      }
      else {
        icon.removeAttribute('size');
      }
    });
    this.el.querySelectorAll('.ld-icon').forEach((icon) => {
      if (this.size === 'sm') {
        icon.classList.remove('ld-icon--lg');
        icon.classList.add('ld-icon--sm');
      }
      else if (this.size === 'lg') {
        icon.classList.remove('ld-icon--sm');
        icon.classList.add('ld-icon--lg');
      }
      else {
        icon.classList.remove('ld-icon--sm', 'ld-icon--lg');
      }
    });
  }
  componentDidLoad() {
    setTimeout(() => {
      this.updateScrollable();
      this.updateScrollButtons();
    });
  }
  render() {
    return (h(Host, { onKeydown: this.onKeydown.bind(this), role: "tablist" }, h("div", { class: getClassNames([
        'ld-tablist',
        this.size && `ld-tablist--${this.size}`,
        this.mode && `ld-tablist--${this.mode}`,
        this.rounded && `ld-tablist--rounded-${this.rounded}`,
      ]), part: "wrapper" }, h("button", { "aria-disabled": this.scrollLeftEnabled ? undefined : 'true', class: "ld-tablist__btn-scroll ld-tablist__btn-scroll--left", hidden: !this.scrollable, onClick: this.scroll.bind(this, 'left'), part: "arrow arrow-left", ref: (el) => (this.btnScrollLeftRef = el), tabindex: "-1" }, h("svg", { fill: "none", height: "16", part: "arrow-icon arrow-icon-left", viewBox: "0 0 16 16", width: "16", xmlns: "http://www.w3.org/2000/svg" }, h("title", null, "Scroll left"), h("path", { d: "M10 13L6 8L10 3", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round" }))), h("div", { class: "ld-tablist__scroll-container", onScroll: this.updateScrollButtons.bind(this), part: "scroll-container", ref: (el) => (this.slotContainerRef = el) }, h("slot", null)), h("button", { "aria-disabled": this.scrollRightEnabled ? undefined : 'true', class: "ld-tablist__btn-scroll ld-tablist__btn-scroll--right", hidden: !this.scrollable, onClick: this.scroll.bind(this, 'right'), part: "arrow arrow-right", tabindex: "-1" }, h("svg", { fill: "none", height: "16", part: "arrow-icon arrow-icon-right", viewBox: "0 0 16 16", width: "16", xmlns: "http://www.w3.org/2000/svg" }, h("title", null, "Scroll right"), h("path", { d: "M6 13L10 8L6 3", stroke: "currentColor", "stroke-width": "2", "stroke-linecap": "round", "stroke-linejoin": "round" }))))));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "size": ["componentWillLoad"]
  }; }
};
LdTablist.style = ldTablistCss;

export { LdTablist as ld_tablist };
