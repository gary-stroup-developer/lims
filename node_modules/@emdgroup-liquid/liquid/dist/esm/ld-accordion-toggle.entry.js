import { r as registerInstance, c as createEvent, h, g as getElement, H as Host } from './index-18aa7cbc.js';
import { g as getClassNames } from './getClassNames-3dd92841.js';

const ldAccordionToggleCss = ":host{background-color:var(--ld-col-wht);display:block;border-radius:var(--ld-accordion-border-radius)}.ld-accordion-toggle__button,.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{margin:0;border:0;box-sizing:border-box;text-align:left;touch-action:manipulation;-webkit-user-select:none;user-select:none;width:100%;-webkit-touch-callout:none}.ld-accordion-toggle__button{background-color:var(--ld-accordion-bg-col);align-items:center;border-radius:inherit;color:var(--ld-accordion-col);display:grid;font:var(--ld-typo-body-m);grid-template-columns:1fr var(--ld-accordion-toggle-size);padding:0;position:relative}.ld-accordion-toggle__button[aria-disabled]{color:var(--ld-accordion-col-disabled)}.ld-accordion-toggle__button:not([aria-disabled]){cursor:pointer}.ld-accordion-toggle__button:not([aria-disabled]):where(:focus:focus-visible){background-color:var(--ld-accordion-bg-col-focus);color:var(--ld-accordion-col-focus)}@media (hover:hover){.ld-accordion-toggle__button:not([aria-disabled]):where(:hover){background-color:var(--ld-accordion-bg-col-hover);color:var(--ld-accordion-col-hover)}}.ld-accordion-toggle__button:not([aria-disabled]):where(:active),.ld-accordion-toggle__button:not([aria-disabled]):where(:active:focus-visible){background-color:var(--ld-accordion-bg-col-active);color:var(--ld-accordion-col-active)}.ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger{color:var(--ld-accordion-trigger-icon-col)}.ld-accordion-toggle__button:not([aria-disabled]):active .ld-accordion-toggle__trigger,.ld-accordion-toggle__button:not([aria-disabled]):active:focus-visible .ld-accordion-toggle__trigger,.ld-accordion-toggle__button:not([aria-disabled]):focus:focus-visible .ld-accordion-toggle__trigger,.ld-accordion-toggle__button:not([aria-disabled]):hover .ld-accordion-toggle__trigger{color:inherit}.ld-accordion-toggle__label,.ld-accordion-toggle__trigger{font:inherit;background-color:initial}.ld-accordion-toggle__label:not([aria-disabled]),.ld-accordion-toggle__trigger:not([aria-disabled]){cursor:pointer}.ld-accordion-toggle__label{position:relative;padding:var(--ld-accordion-padding-y) var(--ld-accordion-padding-x)}.ld-accordion-toggle__trigger{width:var(--ld-accordion-toggle-size);height:var(--ld-accordion-toggle-size);align-items:center;justify-items:center;place-items:center;overflow:hidden}.ld-accordion-toggle__label-content,.ld-accordion-toggle__trigger,.ld-accordion-toggle__trigger-content{position:relative;display:grid}:host(.ld-accordion-toggle--expanded){border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.ld-accordion-toggle--expanded) .ld-accordion-toggle__trigger-icon{transform:scaleY(-1)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label:before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger:before{content:\"\";position:absolute;top:var(--ld-sp-4);right:var(--ld-sp-4);bottom:var(--ld-sp-4);left:var(--ld-sp-4);border-radius:var(--ld-br-s)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__label[aria-disabled],:host(.ld-accordion-toggle--split) .ld-accordion-toggle__trigger[aria-disabled]{color:var(--ld-accordion-col-disabled)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]){background-color:var(--ld-accordion-bg-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]){color:var(--ld-accordion-col)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]){color:var(--ld-thm-primary)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:focus:focus-visible),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:focus:focus-visible){color:var(--ld-accordion-col-focus)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:focus:focus-visible):before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:focus:focus-visible):before{background-color:var(--ld-accordion-bg-col-focus)}@media (hover:hover){:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:hover),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:hover){color:var(--ld-accordion-col-hover)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:hover):before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:hover):before{background-color:var(--ld-accordion-bg-col-hover)}}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:active:focus-visible),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active),:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active:focus-visible){color:var(--ld-accordion-col-active)}:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:active):before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__label:not([aria-disabled]):where(:active:focus-visible):before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active):before,:host(.ld-accordion-toggle--split) .ld-accordion-toggle__button:not([aria-disabled]) .ld-accordion-toggle__trigger:not([aria-disabled]):where(:active:focus-visible):before{background-color:var(--ld-accordion-bg-col-active)}.ld-accordion-toggle__content{display:contents}";

let LdAccordionToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ldaccordiontoggleclick = createEvent(this, "ldaccordiontoggleclick", 7);
    this.ldaccordionlabelclick = createEvent(this, "ldaccordionlabelclick", 7);
    /** Used as aria-label value on the toggle trigger element. */
    this.toggleLabel = 'Toggle';
    this.hasCustomIcon = false;
    this.handleToggleClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordiontoggleclick.emit();
    };
    this.handleLabelClick = (ev) => {
      ev.preventDefault();
      if (this.disabled)
        return;
      this.ldaccordionlabelclick.emit();
    };
  }
  /** Focuses the toggle */
  async focusInner() {
    this.btnRef.focus({ preventScroll: true });
  }
  /**
   * @internal
   * Updates expanded state.
   */
  async setExpanded(expanded) {
    this.expanded = expanded;
  }
  componentWillLoad() {
    this.hasCustomIcon = !!this.el.querySelector('[slot="icon"]');
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-toggle',
      this.expanded && 'ld-accordion-toggle--expanded',
      this.split && 'ld-accordion-toggle--split',
    ]);
    const toggleTriggerContent = (h("div", { class: "ld-accordion-toggle__trigger-content" }, h("slot", { name: "icon" }), !this.hasCustomIcon && (h("ld-icon", { name: "arrow-down", size: "sm", part: "trigger-icon", "aria-hidden": "true", class: "ld-accordion-toggle__trigger-icon" }))));
    const toggleTrigger = this.split ? (h("button", { part: "trigger focusable", class: "ld-accordion-toggle__trigger", "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, "aria-label": this.toggleLabel, onClick: this.handleToggleClick, ref: (el) => (this.btnRef = el) }, toggleTriggerContent)) : (h("div", { part: "trigger", class: "ld-accordion-toggle__trigger" }, toggleTriggerContent));
    const toggleLabel = this.split ? (h("button", { part: "label focusable", "aria-disabled": this.disabled ? 'true' : undefined, class: "ld-accordion-toggle__label", onClick: this.handleLabelClick }, h("div", { class: "ld-accordion-toggle__label-content" }, h("slot", null)))) : (h("div", { part: "label", class: "ld-accordion-toggle__label" }, h("div", { class: "ld-accordion-toggle__label-content" }, h("slot", null))));
    const toggleContent = (h("div", { part: "content", class: "ld-accordion-toggle__content" }, toggleLabel, toggleTrigger));
    const toggle = this.split ? (h("div", { part: "toggle focusable", class: "ld-accordion-toggle__button" }, toggleContent)) : (h("button", { "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "ld-accordion-toggle__button", onClick: this.handleToggleClick, part: "toggle focusable", ref: (el) => (this.btnRef = el), "tab-index": this.ldTabindex }, toggleContent));
    return h(Host, { class: cl }, toggle);
  }
  get el() { return getElement(this); }
};
LdAccordionToggle.style = ldAccordionToggleCss;

export { LdAccordionToggle as ld_accordion_toggle };
