import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-18aa7cbc.js';
import { g as getClassNames } from './getClassNames-3dd92841.js';

const ldAccordionSectionCss = ":host{display:block}";

let LdAccordionSection = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ldaccordionchange = createEvent(this, "ldaccordionchange", 7);
    this.initialized = false;
  }
  updateExpandedState(newExpanded) {
    Array.from(this.el.children).forEach((child) => {
      child.setExpanded(newExpanded);
    });
    if (this.initialized) {
      this.ldaccordionchange.emit(newExpanded);
    }
  }
  handleToggleClick(ev) {
    if (ev.target.closest('ld-accordion-section') !== this.el) {
      return;
    }
    this.expanded = !this.expanded;
  }
  componentWillLoad() {
    this.updateExpandedState(this.expanded);
    this.initialized = true;
  }
  render() {
    const cl = getClassNames([
      'ld-accordion-section',
      this.expanded && 'ld-accordion-section--expanded',
    ]);
    return (h(Host, { class: cl, onLdaccordiontoggleclick: this.handleToggleClick.bind(this) }, h("slot", null)));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "expanded": ["updateExpandedState"]
  }; }
};
LdAccordionSection.style = ldAccordionSectionCss;

export { LdAccordionSection as ld_accordion_section };
