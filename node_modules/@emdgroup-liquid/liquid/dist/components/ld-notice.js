import { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';
import { d as defineCustomElement$3 } from './ld-icon2.js';
import { d as defineCustomElement$2 } from './ld-typo2.js';

const ldNoticeCss = ".ld-notice,:host{--ld-notice-error-icon-col:var(--ld-thm-error);--ld-notice-info-icon-col:var(--ld-thm-primary);--ld-notice-warning-icon-col:var(--ld-thm-warning);background:var(--ld-col-wht);border-radius:var(--ld-br-l);box-shadow:var(--ld-shadow-stacked);color:var(--ld-col-neutral-800);display:block;font:var(--ld-typo-body-m);padding:var(--ld-sp-24);padding-left:calc(var(--ld-sp-24) + var(--ld-sp-40));position:relative}.ld-notice ::slotted(a),.ld-notice a,:host ::slotted(a),:host a{color:var(--ld-thm-primary);text-decoration:underline}.ld-notice ::slotted(code),.ld-notice code,:host ::slotted(code),:host code{background-color:var(--ld-col-neutral-010);border-radius:var(--ld-br-s);box-shadow:inset 0 0 0 var(--ld-sp-1) var(--ld-col-neutral-100);padding:0 var(--ld-sp-4)}.ld-notice--error .ld-notice__headline,.ld-notice--error .ld-notice__icon,:host(.ld-notice--error) .ld-notice__headline,:host(.ld-notice--error) .ld-notice__icon{color:var(--ld-notice-error-icon-col)}.ld-notice--error .ld-notice__icon,:host(.ld-notice--error) .ld-notice__icon{transform:rotate(180deg)}.ld-notice--info .ld-notice__headline,.ld-notice--info .ld-notice__icon,:host(.ld-notice--info) .ld-notice__headline,:host(.ld-notice--info) .ld-notice__icon{color:var(--ld-notice-info-icon-col)}.ld-notice--warning,:host(.ld-notice--warning){background:var(--ld-thm-warning-highlight)}.ld-notice--warning .ld-notice__icon,:host(.ld-notice--warning) .ld-notice__icon{--ld-icon-secondary-col:var(--ld-col-neutral-900);color:var(--ld-notice-warning-icon-col)}.ld-notice--warning .ld-notice__headline,:host(.ld-notice--warning) .ld-notice__headline{color:var(--ld-col-neutral-900)}.ld-notice__headline{margin:0 0 var(--ld-sp-12)}.ld-notice__icon{left:var(--ld-sp-24);position:absolute;top:var(--ld-sp-24)}";

let LdNotice$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /** Mode of the notice. */
    this.mode = 'info';
  }
  render() {
    return (h(Host, { class: `ld-notice ld-notice--${this.mode}` }, h("ld-icon", { class: "ld-notice__icon", name: "info", part: "icon", size: "lg" }), this.headline && (h("ld-typo", { class: "ld-notice__headline", variant: "h4", tag: "p", part: "headline" }, this.headline)), h("slot", null)));
  }
  static get style() { return ldNoticeCss; }
};
LdNotice$1 = /*@__PURE__*/ proxyCustomElement(LdNotice$1, [1, "ld-notice", {
    "headline": [1],
    "mode": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-notice", "ld-icon", "ld-typo"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-notice":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdNotice$1);
      }
      break;
    case "ld-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "ld-typo":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}
defineCustomElement$1();

const LdNotice = LdNotice$1;
const defineCustomElement = defineCustomElement$1;

export { LdNotice, defineCustomElement };
