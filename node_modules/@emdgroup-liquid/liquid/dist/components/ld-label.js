import { HTMLElement, h, proxyCustomElement } from '@stencil/core/internal/client';
import { c as cloneAttributes } from './cloneAttributes.js';
import { g as getClassNames } from './getClassNames.js';

const ldLabelCss = ":host{display:inline-flex}:host .ld-label{width:100%}.ld-label{--ld-label-column-gap:0.625rem;--ld-label-row-gap:var(--ld-sp-6);--ld-label-col:var(--ld-col-neutral-900);--ld-label-disabled-col:var(--ld-col-neutral-300);color:var(--ld-label-col);font:var(--ld-typo-label-s);display:inline-grid;row-gap:var(--ld-label-row-gap);column-gap:0;max-width:100%;align-content:flex-start}.ld-label--left,.ld-label--right{justify-content:flex-start;align-items:center;column-gap:var(--ld-label-column-gap);row-gap:0}.ld-label--left>.ld-checkbox,.ld-label--left>.ld-input,.ld-label--left>.ld-radio,.ld-label--left>.ld-select,.ld-label--left>.ld-toggle,.ld-label--left>::slotted(.ld-checkbox),.ld-label--left>::slotted(.ld-input),.ld-label--left>::slotted(.ld-radio),.ld-label--left>::slotted(.ld-select),.ld-label--left>::slotted(.ld-toggle),.ld-label--right>.ld-checkbox,.ld-label--right>.ld-input,.ld-label--right>.ld-radio,.ld-label--right>.ld-select,.ld-label--right>.ld-toggle,.ld-label--right>::slotted(.ld-checkbox),.ld-label--right>::slotted(.ld-input),.ld-label--right>::slotted(.ld-radio),.ld-label--right>::slotted(.ld-select),.ld-label--right>::slotted(.ld-toggle){grid-area:input;align-self:baseline}.ld-label--left>.ld-input-message,.ld-label--left>::slotted(.ld-input-message),.ld-label--right>.ld-input-message,.ld-label--right>::slotted(.ld-input-message){grid-area:message;margin-top:var(--ld-sp-4)}.ld-label--align-message.ld-label--left>.ld-input-message,.ld-label--align-message.ld-label--left>::slotted(.ld-input-message){grid-column-start:2}.ld-label--align-message.ld-label--right>.ld-input-message,.ld-label--align-message.ld-label--right>::slotted(.ld-input-message){grid-column-end:2}.ld-label--left{grid-template-columns:1fr auto;grid-template-areas:\"label input\" \"message message\"}.ld-label--right{grid-template-columns:auto 1fr;grid-template-areas:\"input label\" \"message message\"}.ld-label--m{font:var(--ld-typo-label-m);line-height:1}";

let LdLabel$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.handleClick = async (event) => {
      const inputElement = this.el.querySelector('ld-input, ld-textarea, ld-toggle, ld-select, ld-button, ld-checkbox, ld-radio, input, textarea, button, select');
      const clickedInsideInputElement = event.target === inputElement ||
        inputElement.contains(event.target);
      if (inputElement && !clickedInsideInputElement) {
        if ('focusInner' in inputElement) {
          await inputElement.focusInner();
        }
        else {
          inputElement.focus();
        }
        inputElement.click();
      }
    };
  }
  componentWillLoad() {
    this.attributesObserver = cloneAttributes.call(this, [
      'align-message',
      'position',
      'size',
    ]);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.attributesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    const cl = getClassNames([
      'ld-label',
      this.alignMessage && 'ld-label--align-message',
      this.position && `ld-label--${this.position}`,
      this.size && `ld-label--${this.size}`,
    ]);
    return (h("label", Object.assign({}, this.clonedAttributes, { class: cl, onClick: this.handleClick, part: "tag" }), h("slot", null)));
  }
  get el() { return this; }
  static get style() { return ldLabelCss; }
};
LdLabel$1 = /*@__PURE__*/ proxyCustomElement(LdLabel$1, [1, "ld-label", {
    "alignMessage": [4, "align-message"],
    "position": [1],
    "size": [1],
    "clonedAttributes": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-label"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-label":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdLabel$1);
      }
      break;
  } });
}
defineCustomElement$1();

const LdLabel = LdLabel$1;
const defineCustomElement = defineCustomElement$1;

export { LdLabel, defineCustomElement };
