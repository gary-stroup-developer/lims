import { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';

const ldSelectPopperCss = ":host{--ld-select-popper-min-width:12.8125rem;--ld-select-popper-max-height:calc(100vh - 1.25rem);--ld-select-popper-border-col:var(--ld-col-neutral-100);--ld-select-popper-bg-col:var(--ld-col-wht);min-width:var(--ld-select-popper-min-width)}.ld-select-popper{min-width:100%}.ld-select-popper:not(.ld-select-popper--expanded){display:none}.ld-select-popper ::slotted(.ld-select__shadow){display:block;position:absolute;width:100%;height:100%;box-shadow:var(--ld-shadow-sticky);border-radius:var(--ld-br-m);pointer-events:none;z-index:-1}.ld-select-popper__scroll-container{max-height:var(--ld-select-popper-max-height);overflow-y:auto;border-bottom-left-radius:var(--ld-br-m);border-bottom-right-radius:var(--ld-br-m);border-top:solid var(--ld-select-popper-border-col) var(--ld-sp-1)}.ld-select-popper--detached .ld-select-popper__scroll-container,.ld-select-popper--pinned .ld-select-popper__scroll-container{border-top:0;border-radius:var(--ld-br-m)}.ld-select-popper__shadow{position:absolute;width:100%;height:calc(100% + var(--ld-select-min-height-md));box-shadow:var(--ld-shadow-sticky);border-radius:var(--ld-br-m);pointer-events:none;background-color:var(--ld-select-popper-bg-col);z-index:-1;bottom:0}.ld-select-popper--detached .ld-select-popper__shadow{height:100%!important}";

let LdSelectPopper = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * Indicates if select element is expanded.
     */
    this.expanded = false;
    this.isPinned = false;
    this.shadowHeight = '100%';
  }
  updatePinnedState() {
    this.isPinned = this.el.classList.contains('ld-tether-pinned');
  }
  updatePopperTheme(newValue, oldValue) {
    this.el.classList.remove(`ld-theme-${oldValue}`);
    if (newValue)
      this.el.classList.add(`ld-theme-${newValue}`);
  }
  /**
   * Focuses the tab
   */
  async updateShadowHeight(height) {
    this.shadowHeight = height;
  }
  componentWillLoad() {
    this.popperClass && this.el.classList.add(this.popperClass);
  }
  render() {
    return (h(Host, { style: {
        zIndex: this.isPinned ? '2147483647' : '2147483646',
        display: this.expanded ? 'block' : 'none',
      } }, h("div", { class: getClassNames([
        'ld-select-popper',
        this.expanded && 'ld-select-popper--expanded',
        this.detached && 'ld-select-popper--detached',
        this.size && `ld-select-popper--${this.size}`,
        this.isPinned && 'ld-select-popper--pinned',
      ]), part: "popper" }, h("div", { class: "ld-select-popper__scroll-container", part: "popper-scroll-container" }, h("slot", null), h("div", { class: "ld-select-popper__shadow", style: { height: this.isPinned ? '100%' : this.shadowHeight }, part: "shadow" })))));
  }
  get el() { return this; }
  static get watchers() { return {
    "class": ["updatePinnedState"],
    "theme": ["updatePopperTheme"]
  }; }
  static get style() { return ldSelectPopperCss; }
};
LdSelectPopper = /*@__PURE__*/ proxyCustomElement(LdSelectPopper, [1, "ld-select-popper", {
    "expanded": [4],
    "size": [1],
    "detached": [4],
    "theme": [1],
    "popperClass": [1, "popper-class"],
    "class": [1537],
    "isPinned": [32],
    "shadowHeight": [32],
    "updateShadowHeight": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-select-popper"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-select-popper":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdSelectPopper);
      }
      break;
  } });
}
defineCustomElement();

export { LdSelectPopper as L, defineCustomElement as d };
