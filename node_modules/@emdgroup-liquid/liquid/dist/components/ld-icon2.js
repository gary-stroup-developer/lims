import { HTMLElement, Build, h, Host, proxyCustomElement } from '@stencil/core/internal/client';
import { g as getClassNames } from './getClassNames.js';
import { g as getLdAssetPath } from './getLdAssetPath.js';

const iconCache = {};
const requestCache = {};
async function fetchIcon(icon) {
  if (iconCache[icon]) {
    return iconCache[icon];
  }
  if (!requestCache[icon]) {
    requestCache[icon] = fetch(getLdAssetPath(`./assets/${icon}.svg`))
      .then((resp) => resp.text())
      .catch((err) => {
      console.error(`"${icon}" is not a valid name`, err);
      return '';
    });
  }
  const path = await requestCache[icon];
  iconCache[icon] = path;
  return path;
}

const ldIconCss = ":host,:where(.ld-icon){--ld-icon-secondary-col:var(--ld-col-wht);--ld-icon-size-sm:1rem;--ld-icon-size-md:1.25rem;--ld-icon-size-lg:1.5rem;display:inline-flex;justify-content:center;align-items:center;width:var(--ld-icon-size-md);height:var(--ld-icon-size-md)}:host ::slotted(svg),:host :where(svg),:where(.ld-icon) ::slotted(svg),:where(.ld-icon) :where(svg){width:var(--ld-icon-size-md);height:var(--ld-icon-size-md);flex-shrink:0}:host(.ld-icon--sm),:host(.ld-icon--sm) ::slotted(svg),:host(.ld-icon--sm) :where(svg),:where(.ld-icon--sm),:where(.ld-icon--sm) ::slotted(svg),:where(.ld-icon--sm) :where(svg){width:var(--ld-icon-size-sm);height:var(--ld-icon-size-sm)}:host(.ld-icon--lg),:host(.ld-icon--lg) ::slotted(svg),:host(.ld-icon--lg) :where(svg),:where(.ld-icon--lg),:where(.ld-icon--lg) ::slotted(svg),:where(.ld-icon--lg) :where(svg){width:var(--ld-icon-size-lg);height:var(--ld-icon-size-lg)}";

let LdIcon = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /** The icon name. */
    this.name = null;
  }
  async loadIconPathData() {
    if ((!Build.isBrowser && !Build.isTesting) || !this.name) {
      return;
    }
    const div = document.createElement('div');
    const iconString = await fetchIcon(this.name);
    div.innerHTML = iconString.replace('<svg', '<svg class="ld-icon__svg" part="icon"');
    Array.from(this.element.shadowRoot.children).forEach((child) => {
      if (child.tagName !== 'STYLE') {
        this.element.shadowRoot.removeChild(child);
      }
    });
    this.element.shadowRoot.appendChild(div.firstChild);
  }
  async componentWillLoad() {
    this.loadIconPathData();
  }
  render() {
    return (h(Host, { class: getClassNames(['ld-icon', this.size && `ld-icon--${this.size}`]), role: "presentation" }, !this.name && h("slot", null)));
  }
  static get assetsDirs() { return ["assets"]; }
  get element() { return this; }
  static get watchers() { return {
    "name": ["loadIconPathData"]
  }; }
  static get style() { return ldIconCss; }
};
LdIcon = /*@__PURE__*/ proxyCustomElement(LdIcon, [1, "ld-icon", {
    "name": [1],
    "size": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-icon":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdIcon);
      }
      break;
  } });
}
defineCustomElement();

export { LdIcon as L, defineCustomElement as d };
