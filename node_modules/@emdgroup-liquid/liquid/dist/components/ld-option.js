import { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';

const ldOptionCss = "";

let LdOption$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
  }
  componentWillLoad() {
    // Setting selected via prop directly triggers the mutation observer to fire twice on attribute chage.
    // This is indeed only true for the selected attribute. The disabled attribute works fine when assigned directly.
    if (this.selected) {
      this.el.setAttribute('selected', '');
    }
  }
  render() {
    return (h(Host, { class: "ld-option" }, h("slot", null)));
  }
  get el() { return this; }
  static get style() { return ldOptionCss; }
};
LdOption$1 = /*@__PURE__*/ proxyCustomElement(LdOption$1, [1, "ld-option", {
    "value": [1],
    "selected": [4],
    "disabled": [4]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-option"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-option":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdOption$1);
      }
      break;
  } });
}
defineCustomElement$1();

const LdOption = LdOption$1;
const defineCustomElement = defineCustomElement$1;

export { LdOption, defineCustomElement };
