import { HTMLElement, h, Host, proxyCustomElement } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './ld-typo2.js';

const ldSidenavHeadingCss = ":host{padding:0 var(--ld-sidenav-padding-x);color:var(--ld-col-neutral-600)}";

let LdSidenavHeading$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
  }
  render() {
    return (h(Host, { class: "ld-sidenav-heading" }, h("ld-typo", { variant: "cap-m", part: "typo" }, h("slot", null))));
  }
  static get style() { return ldSidenavHeadingCss; }
};
LdSidenavHeading$1 = /*@__PURE__*/ proxyCustomElement(LdSidenavHeading$1, [1, "ld-sidenav-heading"]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["ld-sidenav-heading", "ld-typo"];
  components.forEach(tagName => { switch (tagName) {
    case "ld-sidenav-heading":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, LdSidenavHeading$1);
      }
      break;
    case "ld-typo":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}
defineCustomElement$1();

const LdSidenavHeading = LdSidenavHeading$1;
const defineCustomElement = defineCustomElement$1;

export { LdSidenavHeading, defineCustomElement };
